'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _winappdriver = require('./winappdriver');

var _winappdriver2 = _interopRequireDefault(_winappdriver);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var WINAPPDRIVER_PORT = 4723;
var WINAPPDRIVER_HOST = "localhost";

// Appium instantiates this class

var WindowsDriver = (function (_BaseDriver) {
  _inherits(WindowsDriver, _BaseDriver);

  function WindowsDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, WindowsDriver);

    _get(Object.getPrototypeOf(WindowsDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);
    this.jwpProxyActive = false;
    this.opts.port = opts.port || WINAPPDRIVER_PORT;
    this.opts.host = opts.host || WINAPPDRIVER_HOST;
  }

  _createClass(WindowsDriver, [{
    key: 'createSession',
    value: function createSession(caps) {
      var sessionId, _ref, _ref2;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (_appiumSupport.system.isWindows()) {
              context$2$0.next = 2;
              break;
            }

            throw new Error("WinAppDriver tests only run on Windows");

          case 2:
            context$2$0.prev = 2;
            sessionId = undefined;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(WindowsDriver.prototype), 'createSession', this).call(this, caps));

          case 6:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.startWinAppDriverSession());

          case 11:
            return context$2$0.abrupt('return', [sessionId, caps]);

          case 14:
            context$2$0.prev = 14;
            context$2$0.t0 = context$2$0['catch'](2);
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 18:
            throw context$2$0.t0;

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 14]]);
    }
  }, {
    key: 'startWinAppDriverSession',
    value: function startWinAppDriverSession() {
      return _regeneratorRuntime.async(function startWinAppDriverSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.winAppDriver = new _winappdriver2['default']({
              app: this.opts.app
            });
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.winAppDriver.start());

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.winAppDriver.startSession(this.caps));

          case 5:
            this.proxyReqRes = this.winAppDriver.proxyReqRes.bind(this.winAppDriver);
            // now that everything has started successfully, turn on proxying so all
            // subsequent session requests go straight to/from WinAppDriver
            this.jwpProxyActive = true;

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting WinAppDriver session');

            if (!(this.winAppDriver && this.jwpProxyActive)) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.winAppDriver.deleteSession());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.winAppDriver.stop());

          case 6:
            this.winAppDriver = null;

          case 7:
            this.jwpProxyActive = false;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(WindowsDriver.prototype), 'deleteSession', this).call(this));

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive() {
      // we always have an active proxy to the WinAppDriver server
      return true;
    }
  }, {
    key: 'canProxy',
    value: function canProxy() {
      // we can always proxy to the WinAppDriver server
      return true;
    }
  }]);

  return WindowsDriver;
})(_appiumBaseDriver.BaseDriver);

exports.WindowsDriver = WindowsDriver;
exports['default'] = WindowsDriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYlxcZHJpdmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQUEyQixvQkFBb0I7OzZCQUN4QixnQkFBZ0I7OzRCQUNkLGdCQUFnQjs7OztzQkFDdEIsVUFBVTs7OztBQUU3QixJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQztBQUMvQixJQUFNLGlCQUFpQixHQUFHLFdBQVcsQ0FBQzs7OztJQUdoQyxhQUFhO1lBQWIsYUFBYTs7QUFDTCxXQURSLGFBQWEsR0FDa0M7UUFBdEMsSUFBSSx5REFBRyxFQUFFO1FBQUUsa0JBQWtCLHlEQUFHLElBQUk7OzBCQUQ3QyxhQUFhOztBQUVmLCtCQUZFLGFBQWEsNkNBRVQsSUFBSSxFQUFFLGtCQUFrQixFQUFFO0FBQ2hDLFFBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQzVCLFFBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksaUJBQWlCLENBQUM7QUFDaEQsUUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxpQkFBaUIsQ0FBQztHQUNqRDs7ZUFORyxhQUFhOztXQVFHLHVCQUFDLElBQUk7VUFLakIsU0FBUzs7Ozs7Z0JBSlYsc0JBQU8sU0FBUyxFQUFFOzs7OztrQkFDZixJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQzs7OztBQUdyRCxxQkFBUzs7d0VBYmIsYUFBYSwrQ0FjMkIsSUFBSTs7Ozs7QUFBM0MscUJBQVM7OzZDQUNKLElBQUksQ0FBQyx3QkFBd0IsRUFBRTs7O2dEQUM5QixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7Ozs7Ozs2Q0FFbEIsSUFBSSxDQUFDLGFBQWEsRUFBRTs7Ozs7Ozs7OztLQUc3Qjs7O1dBRThCOzs7O0FBQzdCLGdCQUFJLENBQUMsWUFBWSxHQUFHLDhCQUFpQjtBQUNuQyxpQkFBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzthQUNuQixDQUFDLENBQUM7OzZDQUNHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFOzs7OzZDQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7QUFDL0MsZ0JBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzs7O0FBR3pFLGdCQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQzs7Ozs7OztLQUM1Qjs7O1dBRW1COzs7O0FBQ2xCLGdDQUFPLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDOztrQkFFMUMsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFBOzs7Ozs7NkNBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFOzs7OzZDQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRTs7O0FBQzlCLGdCQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzs7O0FBRTNCLGdCQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQzs7d0VBM0MxQixhQUFhOzs7Ozs7O0tBNkNoQjs7O1dBRVcsdUJBQUc7O0FBRWIsYUFBTyxJQUFJLENBQUM7S0FDYjs7O1dBRVEsb0JBQUc7O0FBRVYsYUFBTyxJQUFJLENBQUM7S0FDYjs7O1NBdkRHLGFBQWE7OztRQTBEVixhQUFhLEdBQWIsYUFBYTtxQkFDUCxhQUFhIiwiZmlsZSI6ImxpYlxcZHJpdmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZURyaXZlciB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XHJcbmltcG9ydCB7IHN5c3RlbSB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcclxuaW1wb3J0IFdpbkFwcERyaXZlciBmcm9tICcuL3dpbmFwcGRyaXZlcic7XHJcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xyXG5cclxuY29uc3QgV0lOQVBQRFJJVkVSX1BPUlQgPSA0NzIzO1xyXG5jb25zdCBXSU5BUFBEUklWRVJfSE9TVCA9IFwibG9jYWxob3N0XCI7XHJcblxyXG4vLyBBcHBpdW0gaW5zdGFudGlhdGVzIHRoaXMgY2xhc3NcclxuY2xhc3MgV2luZG93c0RyaXZlciBleHRlbmRzIEJhc2VEcml2ZXIge1xyXG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30sIHNob3VsZFZhbGlkYXRlQ2FwcyA9IHRydWUpIHtcclxuICAgIHN1cGVyKG9wdHMsIHNob3VsZFZhbGlkYXRlQ2Fwcyk7XHJcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gZmFsc2U7XHJcbiAgICB0aGlzLm9wdHMucG9ydCA9IG9wdHMucG9ydCB8fCBXSU5BUFBEUklWRVJfUE9SVDtcclxuICAgIHRoaXMub3B0cy5ob3N0ID0gb3B0cy5ob3N0IHx8IFdJTkFQUERSSVZFUl9IT1NUO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoY2Fwcykge1xyXG4gICAgaWYgKCFzeXN0ZW0uaXNXaW5kb3dzKCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2luQXBwRHJpdmVyIHRlc3RzIG9ubHkgcnVuIG9uIFdpbmRvd3NcIik7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgc2Vzc2lvbklkO1xyXG4gICAgICBbc2Vzc2lvbklkXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XHJcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRXaW5BcHBEcml2ZXJTZXNzaW9uKCk7XHJcbiAgICAgIHJldHVybiBbc2Vzc2lvbklkLCBjYXBzXTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgYXdhaXQgdGhpcy5kZWxldGVTZXNzaW9uKCk7XHJcbiAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBzdGFydFdpbkFwcERyaXZlclNlc3Npb24gKCkge1xyXG4gICAgdGhpcy53aW5BcHBEcml2ZXIgPSBuZXcgV2luQXBwRHJpdmVyKHtcclxuICAgICAgYXBwOiB0aGlzLm9wdHMuYXBwXHJcbiAgICB9KTtcclxuICAgIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnN0YXJ0KCk7XHJcbiAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zdGFydFNlc3Npb24odGhpcy5jYXBzKTtcclxuICAgIHRoaXMucHJveHlSZXFSZXMgPSB0aGlzLndpbkFwcERyaXZlci5wcm94eVJlcVJlcy5iaW5kKHRoaXMud2luQXBwRHJpdmVyKTtcclxuICAgIC8vIG5vdyB0aGF0IGV2ZXJ5dGhpbmcgaGFzIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5LCB0dXJuIG9uIHByb3h5aW5nIHNvIGFsbFxyXG4gICAgLy8gc3Vic2VxdWVudCBzZXNzaW9uIHJlcXVlc3RzIGdvIHN0cmFpZ2h0IHRvL2Zyb20gV2luQXBwRHJpdmVyXHJcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKCkge1xyXG4gICAgbG9nZ2VyLmRlYnVnKCdEZWxldGluZyBXaW5BcHBEcml2ZXIgc2Vzc2lvbicpO1xyXG5cclxuICAgIGlmICh0aGlzLndpbkFwcERyaXZlciAmJiB0aGlzLmp3cFByb3h5QWN0aXZlKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcclxuICAgICAgYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuc3RvcCgpOyBcclxuICAgICAgdGhpcy53aW5BcHBEcml2ZXIgPSBudWxsOyAgXHJcbiAgICB9XHJcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gZmFsc2U7XHJcbiAgICBhd2FpdCBzdXBlci5kZWxldGVTZXNzaW9uKCk7ICAgICAgIFxyXG4gIH1cclxuXHJcbiAgcHJveHlBY3RpdmUgKCkge1xyXG4gICAgLy8gd2UgYWx3YXlzIGhhdmUgYW4gYWN0aXZlIHByb3h5IHRvIHRoZSBXaW5BcHBEcml2ZXIgc2VydmVyXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGNhblByb3h5ICgpIHtcclxuICAgIC8vIHdlIGNhbiBhbHdheXMgcHJveHkgdG8gdGhlIFdpbkFwcERyaXZlciBzZXJ2ZXJcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgV2luZG93c0RyaXZlciB9O1xyXG5leHBvcnQgZGVmYXVsdCBXaW5kb3dzRHJpdmVyOyJdfQ==