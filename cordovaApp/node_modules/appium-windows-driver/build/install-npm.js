#!/usr/bin/env node

/* eslint-disable no-console */

'use strict';

var fs = require('fs'),
    path = require('path'),
    system = require('appium-support').system;

function waitForDeps(cb) {
  // see if we can import the necessary code
  // try it a ridiculous (but finite) number of times
  var i = 0;
  function check() {
    i++;
    try {
      require('./build/lib/installer');
      cb();
    } catch (err) {
      if (err.message.indexOf("Cannot find module './build/lib/installer'") !== -1) {
        console.warn('Project does not appear to built yet. Please run `gulp transpile` first.');
        return cb('Could not install module: ' + err);
      }
      console.warn('Error trying to install WinAppDriver MSI. Waiting and trying again.', err.message);
      if (i <= 200) {
        setTimeout(check, 1000);
      } else {
        cb('Could not import installation module: ' + err);
      }
    }
  }
  check();
}

if (require.main === module) {
  if (!system.isWindows()) {
    console.warn("Not installing WinAppDriver since did not detect a Windows system");
    process.exit(0);
  }
  // check if cur dir exists
  var installScript = path.resolve(__dirname, 'build', 'lib', 'installer.js');
  waitForDeps(function (err) {
    if (err) {
      console.warn("Unable to import install script. Re-run `install appium-windows-driver` manually.");
      return;
    }
    fs.stat(installScript, function (err) {
      if (err) {
        console.warn("NOTE: Run 'gulp transpile' before using");
        return;
      }
      require('./build/lib/installer').setupWAD()['catch'](function (err) {
        console.error(err.message);
        console.error("WinAppDriver was not installed; please check your " + "system and re-run npm install if you need WinAppDriver");
      });
    });
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGwtbnBtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNsQixJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUN0QixNQUFNLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDOztBQUc5QyxTQUFTLFdBQVcsQ0FBRSxFQUFFLEVBQUU7OztBQUd4QixNQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixXQUFTLEtBQUssR0FBSTtBQUNoQixLQUFDLEVBQUUsQ0FBQztBQUNKLFFBQUk7QUFDRixhQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNqQyxRQUFFLEVBQUUsQ0FBQztLQUNOLENBQUMsT0FBTyxHQUFHLEVBQUU7QUFDWixVQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDNUUsZUFBTyxDQUFDLElBQUksQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBQ3pGLGVBQU8sRUFBRSxDQUFDLDRCQUE0QixHQUFHLEdBQUcsQ0FBQyxDQUFDO09BQy9DO0FBQ0QsYUFBTyxDQUFDLElBQUksQ0FBQyxxRUFBcUUsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakcsVUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO0FBQ1osa0JBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDekIsTUFBTTtBQUNMLFVBQUUsQ0FBQyx3Q0FBd0MsR0FBRyxHQUFHLENBQUMsQ0FBQztPQUNwRDtLQUNGO0dBQ0Y7QUFDRCxPQUFLLEVBQUUsQ0FBQztDQUNUOztBQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7QUFDM0IsTUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUN2QixXQUFPLENBQUMsSUFBSSxDQUFDLG1FQUFtRSxDQUFDLENBQUM7QUFDbEYsV0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNqQjs7QUFFRCxNQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQzVFLGFBQVcsQ0FBQyxVQUFVLEdBQUcsRUFBRTtBQUN6QixRQUFJLEdBQUcsRUFBRTtBQUNQLGFBQU8sQ0FBQyxJQUFJLENBQUMsbUZBQW1GLENBQUMsQ0FBQztBQUNsRyxhQUFPO0tBQ1I7QUFDRCxNQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLEdBQUcsRUFBRTtBQUNwQyxVQUFJLEdBQUcsRUFBRTtBQUNQLGVBQU8sQ0FBQyxJQUFJLENBQUMseUNBQXlDLENBQUMsQ0FBQztBQUN4RCxlQUFPO09BQ1I7QUFDRCxhQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxRQUFRLEVBQUUsU0FBTSxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQy9ELGVBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLGVBQU8sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEdBQ3BELHdEQUF3RCxDQUFDLENBQUM7T0FDekUsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiaW5zdGFsbC1ucG0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xyXG5cclxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxyXG4gICwgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxyXG4gICwgc3lzdGVtID0gcmVxdWlyZSgnYXBwaXVtLXN1cHBvcnQnKS5zeXN0ZW07XHJcblxyXG5cclxuZnVuY3Rpb24gd2FpdEZvckRlcHMgKGNiKSB7XHJcbiAgLy8gc2VlIGlmIHdlIGNhbiBpbXBvcnQgdGhlIG5lY2Vzc2FyeSBjb2RlXHJcbiAgLy8gdHJ5IGl0IGEgcmlkaWN1bG91cyAoYnV0IGZpbml0ZSkgbnVtYmVyIG9mIHRpbWVzXHJcbiAgdmFyIGkgPSAwO1xyXG4gIGZ1bmN0aW9uIGNoZWNrICgpIHtcclxuICAgIGkrKztcclxuICAgIHRyeSB7XHJcbiAgICAgIHJlcXVpcmUoJy4vYnVpbGQvbGliL2luc3RhbGxlcicpO1xyXG4gICAgICBjYigpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKFwiQ2Fubm90IGZpbmQgbW9kdWxlICcuL2J1aWxkL2xpYi9pbnN0YWxsZXInXCIpICE9PSAtMSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignUHJvamVjdCBkb2VzIG5vdCBhcHBlYXIgdG8gYnVpbHQgeWV0LiBQbGVhc2UgcnVuIGBndWxwIHRyYW5zcGlsZWAgZmlyc3QuJyk7XHJcbiAgICAgICAgcmV0dXJuIGNiKCdDb3VsZCBub3QgaW5zdGFsbCBtb2R1bGU6ICcgKyBlcnIpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUud2FybignRXJyb3IgdHJ5aW5nIHRvIGluc3RhbGwgV2luQXBwRHJpdmVyIE1TSS4gV2FpdGluZyBhbmQgdHJ5aW5nIGFnYWluLicsIGVyci5tZXNzYWdlKTtcclxuICAgICAgaWYgKGkgPD0gMjAwKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChjaGVjaywgMTAwMCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2IoJ0NvdWxkIG5vdCBpbXBvcnQgaW5zdGFsbGF0aW9uIG1vZHVsZTogJyArIGVycik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgY2hlY2soKTtcclxufVxyXG5cclxuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XHJcbiAgaWYgKCFzeXN0ZW0uaXNXaW5kb3dzKCkpIHtcclxuICAgIGNvbnNvbGUud2FybihcIk5vdCBpbnN0YWxsaW5nIFdpbkFwcERyaXZlciBzaW5jZSBkaWQgbm90IGRldGVjdCBhIFdpbmRvd3Mgc3lzdGVtXCIpO1xyXG4gICAgcHJvY2Vzcy5leGl0KDApO1xyXG4gIH1cclxuICAvLyBjaGVjayBpZiBjdXIgZGlyIGV4aXN0c1xyXG4gIHZhciBpbnN0YWxsU2NyaXB0ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2J1aWxkJywgJ2xpYicsICdpbnN0YWxsZXIuanMnKTtcclxuICB3YWl0Rm9yRGVwcyhmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICBpZiAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBpbXBvcnQgaW5zdGFsbCBzY3JpcHQuIFJlLXJ1biBgaW5zdGFsbCBhcHBpdW0td2luZG93cy1kcml2ZXJgIG1hbnVhbGx5LlwiKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZnMuc3RhdChpbnN0YWxsU2NyaXB0LCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJOT1RFOiBSdW4gJ2d1bHAgdHJhbnNwaWxlJyBiZWZvcmUgdXNpbmdcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHJlcXVpcmUoJy4vYnVpbGQvbGliL2luc3RhbGxlcicpLnNldHVwV0FEKCkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXaW5BcHBEcml2ZXIgd2FzIG5vdCBpbnN0YWxsZWQ7IHBsZWFzZSBjaGVjayB5b3VyIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgIFwic3lzdGVtIGFuZCByZS1ydW4gbnBtIGluc3RhbGwgaWYgeW91IG5lZWQgV2luQXBwRHJpdmVyXCIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG4iXX0=