require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libWinappdriver = require('../../lib/winappdriver');

var _libWinappdriver2 = _interopRequireDefault(_libWinappdriver);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function buildWinAppDriverOpts() {
  return {
    app: 'foo',
    host: 'localhost',
    port: 4723
  };
}

describe('WinAppDriverServer', function () {
  describe('#constructor', function () {
    it('should complain if required options not sent', function () {
      (function () {
        new _libWinappdriver2['default']();
      }).should['throw'](/Option.*app.*required/);
      (function () {
        new _libWinappdriver2['default']({});
      }).should['throw'](/Option.*app.*required/);
    });
  });

  describe('#startSession', (0, _appiumTestSupport.withMocks)({}, function (mocks, S) {
    var winAppDriver = new _libWinappdriver2['default'](buildWinAppDriverOpts());

    it('should start a session', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { foo: 'bar' };

            mocks.jwproxy = S.sandbox.mock(winAppDriver.jwproxy);
            mocks.jwproxy.expects("command").once().withExactArgs("/session", "POST", { desiredCapabilities: caps }).returns(_Promise.resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(winAppDriver.startSession(caps));

          case 5:
            mocks.jwproxy.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RcXHVuaXRcXHdpbmFwcGRyaXZlci1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7OytCQUNkLHdCQUF3Qjs7OztpQ0FDN0IscUJBQXFCOztBQUUvQyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFNBQVMscUJBQXFCLEdBQUk7QUFDaEMsU0FBTztBQUNMLE9BQUcsRUFBRSxLQUFLO0FBQ1YsUUFBSSxFQUFFLFdBQVc7QUFDakIsUUFBSSxFQUFFLElBQUk7R0FDWCxDQUFDO0NBQ0g7O0FBRUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFLFlBQU07QUFDbkMsVUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFNO0FBQzdCLE1BQUUsQ0FBQyw4Q0FBOEMsRUFBRSxZQUFNO0FBQ3ZELE9BQUMsWUFBTTtBQUNMLDBDQUF3QixDQUFDO09BQzFCLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3pDLE9BQUMsWUFBTTtBQUNMLHlDQUF1QixFQUFFLENBQUMsQ0FBQztPQUM1QixDQUFBLENBQUUsTUFBTSxTQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUMxQyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGVBQWUsRUFBRSxrQ0FBVSxFQUFHLEVBQUUsVUFBQyxLQUFLLEVBQUUsQ0FBQyxFQUFLO0FBQ3JELFFBQUksWUFBWSxHQUFHLGlDQUF1QixxQkFBcUIsRUFBRSxDQUFDLENBQUM7O0FBRW5FLE1BQUUsQ0FBQyx3QkFBd0IsRUFBRTtVQUN2QixJQUFJOzs7O0FBQUosZ0JBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7O0FBQ3pCLGlCQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRCxpQkFBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQ3BDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDaEUsT0FBTyxDQUFDLFNBQVEsT0FBTyxFQUFFLENBQUMsQ0FBQzs7NkNBQ3hCLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDOzs7QUFDckMsaUJBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDeEIsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7Q0FDTCxDQUFDLENBQUMiLCJmaWxlIjoidGVzdFxcdW5pdFxcd2luYXBwZHJpdmVyLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXHJcblxyXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcclxuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xyXG5pbXBvcnQgV2luQXBwRHJpdmVyU2VydmVyIGZyb20gJy4uLy4uL2xpYi93aW5hcHBkcml2ZXInO1xyXG5pbXBvcnQgeyB3aXRoTW9ja3MgfSBmcm9tICdhcHBpdW0tdGVzdC1zdXBwb3J0JztcclxuXHJcbmNoYWkuc2hvdWxkKCk7XHJcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkV2luQXBwRHJpdmVyT3B0cyAoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGFwcDogJ2ZvbycsXHJcbiAgICBob3N0OiAnbG9jYWxob3N0JyxcclxuICAgIHBvcnQ6IDQ3MjNcclxuICB9O1xyXG59XHJcblxyXG5kZXNjcmliZSgnV2luQXBwRHJpdmVyU2VydmVyJywgKCkgPT4ge1xyXG4gIGRlc2NyaWJlKCcjY29uc3RydWN0b3InLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGNvbXBsYWluIGlmIHJlcXVpcmVkIG9wdGlvbnMgbm90IHNlbnQnLCAoKSA9PiB7XHJcbiAgICAgICgoKSA9PiB7XHJcbiAgICAgICAgbmV3IFdpbkFwcERyaXZlclNlcnZlcigpO1xyXG4gICAgICB9KS5zaG91bGQudGhyb3coL09wdGlvbi4qYXBwLipyZXF1aXJlZC8pO1xyXG4gICAgICAoKCkgPT4ge1xyXG4gICAgICAgIG5ldyBXaW5BcHBEcml2ZXJTZXJ2ZXIoe30pO1xyXG4gICAgICB9KS5zaG91bGQudGhyb3coL09wdGlvbi4qYXBwLipyZXF1aXJlZC8pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCcjc3RhcnRTZXNzaW9uJywgd2l0aE1vY2tzKHsgfSwgKG1vY2tzLCBTKSA9PiB7XHJcbiAgICBsZXQgd2luQXBwRHJpdmVyID0gbmV3IFdpbkFwcERyaXZlclNlcnZlcihidWlsZFdpbkFwcERyaXZlck9wdHMoKSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBzdGFydCBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGxldCBjYXBzID0geyBmb286ICdiYXInIH07XHJcbiAgICAgIG1vY2tzLmp3cHJveHkgPSBTLnNhbmRib3gubW9jayh3aW5BcHBEcml2ZXIuandwcm94eSk7XHJcbiAgICAgIG1vY2tzLmp3cHJveHkuZXhwZWN0cyhcImNvbW1hbmRcIikub25jZSgpXHJcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoXCIvc2Vzc2lvblwiLCBcIlBPU1RcIiwgeyBkZXNpcmVkQ2FwYWJpbGl0aWVzOiBjYXBzIH0pXHJcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xyXG4gICAgICBhd2FpdCB3aW5BcHBEcml2ZXIuc3RhcnRTZXNzaW9uKGNhcHMpO1xyXG4gICAgICBtb2Nrcy5qd3Byb3h5LnZlcmlmeSgpO1xyXG4gICAgfSk7XHJcbiAgfSkpO1xyXG59KTtcclxuXHJcbiJdfQ==