require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('driver.js', function () {
  describe('constructor', function () {
    it('calls BaseDriver constructor with opts', function () {
      var driver = new _2['default']({ foo: 'bar' });
      driver.should.exist;
      driver.opts.foo.should.equal('bar');
    });
  });

  describe('createSession', function () {
    it('should set sessionId', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({ app: 'myapp' }, false);

            _sinon2['default'].mock(driver).expects('startWinAppDriverSession').once().returns(_Promise.resolve());
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.createSession({ cap: 'foo' }));

          case 4:
            driver.sessionId.should.exist;
            driver.caps.cap.should.equal('foo');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    // TODO: Implement or delete
    //it('should set the default context', async () => {
    //  let driver = new SelendroidDriver({}, false);
    //  sinon.mock(driver).expects('checkAppPresent')
    //    .returns(Promise.resolve());
    //  sinon.mock(driver).expects('startSelendroidSession')
    //    .returns(Promise.resolve());
    //  await driver.createSession({});
    //  driver.curContext.should.equal('NATIVE_APP');
    //});
  });

  describe('proxying', function () {
    var driver = undefined;
    before(function () {
      driver = new _2['default']({}, false);
      driver.sessionId = 'abc';
    });
    describe('#proxyActive', function () {
      it('should exist', function () {
        driver.proxyActive.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.proxyActive('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.proxyActive('aaa');
        }).should['throw'];
      });
    });

    // TODO: Implement or delete 
    //describe('#getProxyAvoidList', () => {
    //  it('should exist', () => {
    //    driver.getProxyAvoidList.should.be.an.instanceof(Function);
    //  });
    //  it('should return jwpProxyAvoid array', () => {
    //    let avoidList = driver.getProxyAvoidList('abc');
    //    avoidList.should.be.an.instanceof(Array);
    //    avoidList.should.eql(driver.jwpProxyAvoid);
    //  });
    //  it('should throw an error if session id is wrong', () => {
    //    (() => { driver.getProxyAvoidList('aaa'); }).should.throw;
    //  });
    //});

    describe('#canProxy', function () {
      it('should exist', function () {
        driver.canProxy.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.canProxy('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.canProxy('aaa');
        }).should['throw'];
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RcXHVuaXRcXGRyaXZlci1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Z0JBRTBCLE9BQU87Ozs7b0JBQ2hCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3FCQUMzQixPQUFPOzs7O0FBRXpCLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLFdBQVcsRUFBRSxZQUFNO0FBQzFCLFVBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtBQUM1QixNQUFFLENBQUMsd0NBQXdDLEVBQUUsWUFBTTtBQUNqRCxVQUFJLE1BQU0sR0FBRyxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUMvQyxZQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNwQixZQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsZUFBZSxFQUFFLFlBQU07QUFDOUIsTUFBRSxDQUFDLHNCQUFzQixFQUFFO1VBQ3JCLE1BQU07Ozs7QUFBTixrQkFBTSxHQUFHLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUMsRUFBRSxLQUFLLENBQUM7O0FBQ3RELCtCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FDakQsSUFBSSxFQUFFLENBQ04sT0FBTyxDQUFDLFNBQVEsT0FBTyxFQUFFLENBQUMsQ0FBQzs7NkNBQzFCLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7OztBQUMxQyxrQkFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQzlCLGtCQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7O0tBQ3JDLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7O0dBWUosQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxVQUFVLEVBQUUsWUFBTTtBQUN6QixRQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsVUFBTSxDQUFDLFlBQU07QUFDWCxZQUFNLEdBQUcsa0JBQWtCLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxZQUFNLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztLQUMxQixDQUFDLENBQUM7QUFDSCxZQUFRLENBQUMsY0FBYyxFQUFFLFlBQU07QUFDN0IsUUFBRSxDQUFDLGNBQWMsRUFBRSxZQUFNO0FBQ3ZCLGNBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUN0RCxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsb0JBQW9CLEVBQUUsWUFBTTtBQUM3QixjQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQUssQ0FBQztPQUMxQyxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsOENBQThDLEVBQUUsWUFBTTtBQUN2RCxTQUFDLFlBQU07QUFBRSxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQztPQUNyRCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJILFlBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBTTtBQUMxQixRQUFFLENBQUMsY0FBYyxFQUFFLFlBQU07QUFDdkIsY0FBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQ25ELENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0FBQzdCLGNBQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO09BQ3ZDLENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxZQUFNO0FBQ3ZELFNBQUMsWUFBTTtBQUFFLGdCQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQUUsQ0FBQSxDQUFFLE1BQU0sU0FBTSxDQUFDO09BQ2xELENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0XFx1bml0XFxkcml2ZXItc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcclxuXHJcbmltcG9ydCBXaW5kb3dzRHJpdmVyIGZyb20gJy4uLy4uJztcclxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XHJcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcclxuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcclxuXHJcbmNoYWkuc2hvdWxkKCk7XHJcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcclxuXHJcbmRlc2NyaWJlKCdkcml2ZXIuanMnLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ2NvbnN0cnVjdG9yJywgKCkgPT4ge1xyXG4gICAgaXQoJ2NhbGxzIEJhc2VEcml2ZXIgY29uc3RydWN0b3Igd2l0aCBvcHRzJywgKCkgPT4ge1xyXG4gICAgICBsZXQgZHJpdmVyID0gbmV3IFdpbmRvd3NEcml2ZXIoeyBmb286ICdiYXInIH0pO1xyXG4gICAgICBkcml2ZXIuc2hvdWxkLmV4aXN0O1xyXG4gICAgICBkcml2ZXIub3B0cy5mb28uc2hvdWxkLmVxdWFsKCdiYXInKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnY3JlYXRlU2Vzc2lvbicsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgc2V0IHNlc3Npb25JZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgbGV0IGRyaXZlciA9IG5ldyBXaW5kb3dzRHJpdmVyKHsgYXBwOiAnbXlhcHAnfSwgZmFsc2UpO1xyXG4gICAgICBzaW5vbi5tb2NrKGRyaXZlcikuZXhwZWN0cygnc3RhcnRXaW5BcHBEcml2ZXJTZXNzaW9uJylcclxuICAgICAgICAgIC5vbmNlKClcclxuICAgICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSgpKTtcclxuICAgICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oeyBjYXA6ICdmb28nIH0pO1xyXG4gICAgICBkcml2ZXIuc2Vzc2lvbklkLnNob3VsZC5leGlzdDtcclxuICAgICAgZHJpdmVyLmNhcHMuY2FwLnNob3VsZC5lcXVhbCgnZm9vJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBUT0RPOiBJbXBsZW1lbnQgb3IgZGVsZXRlXHJcbiAgICAvL2l0KCdzaG91bGQgc2V0IHRoZSBkZWZhdWx0IGNvbnRleHQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyAgbGV0IGRyaXZlciA9IG5ldyBTZWxlbmRyb2lkRHJpdmVyKHt9LCBmYWxzZSk7XHJcbiAgICAvLyAgc2lub24ubW9jayhkcml2ZXIpLmV4cGVjdHMoJ2NoZWNrQXBwUHJlc2VudCcpXHJcbiAgICAvLyAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XHJcbiAgICAvLyAgc2lub24ubW9jayhkcml2ZXIpLmV4cGVjdHMoJ3N0YXJ0U2VsZW5kcm9pZFNlc3Npb24nKVxyXG4gICAgLy8gICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xyXG4gICAgLy8gIGF3YWl0IGRyaXZlci5jcmVhdGVTZXNzaW9uKHt9KTtcclxuICAgIC8vICBkcml2ZXIuY3VyQ29udGV4dC5zaG91bGQuZXF1YWwoJ05BVElWRV9BUFAnKTtcclxuICAgIC8vfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdwcm94eWluZycsICgpID0+IHtcclxuICAgIGxldCBkcml2ZXI7XHJcbiAgICBiZWZvcmUoKCkgPT4ge1xyXG4gICAgICBkcml2ZXIgPSBuZXcgV2luZG93c0RyaXZlcih7fSwgZmFsc2UpO1xyXG4gICAgICBkcml2ZXIuc2Vzc2lvbklkID0gJ2FiYyc7XHJcbiAgICB9KTtcclxuICAgIGRlc2NyaWJlKCcjcHJveHlBY3RpdmUnLCAoKSA9PiB7XHJcbiAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCAoKSA9PiB7XHJcbiAgICAgICAgZHJpdmVyLnByb3h5QWN0aXZlLnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEZ1bmN0aW9uKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUnLCAoKSA9PiB7XHJcbiAgICAgICAgZHJpdmVyLnByb3h5QWN0aXZlKCdhYmMnKS5zaG91bGQuYmUudHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgc2Vzc2lvbiBpZCBpcyB3cm9uZycsICgpID0+IHtcclxuICAgICAgICAoKCkgPT4geyBkcml2ZXIucHJveHlBY3RpdmUoJ2FhYScpOyB9KS5zaG91bGQudGhyb3c7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVE9ETzogSW1wbGVtZW50IG9yIGRlbGV0ZSAgXHJcbiAgICAvL2Rlc2NyaWJlKCcjZ2V0UHJveHlBdm9pZExpc3QnLCAoKSA9PiB7XHJcbiAgICAvLyAgaXQoJ3Nob3VsZCBleGlzdCcsICgpID0+IHtcclxuICAgIC8vICAgIGRyaXZlci5nZXRQcm94eUF2b2lkTGlzdC5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XHJcbiAgICAvLyAgfSk7XHJcbiAgICAvLyAgaXQoJ3Nob3VsZCByZXR1cm4gandwUHJveHlBdm9pZCBhcnJheScsICgpID0+IHtcclxuICAgIC8vICAgIGxldCBhdm9pZExpc3QgPSBkcml2ZXIuZ2V0UHJveHlBdm9pZExpc3QoJ2FiYycpO1xyXG4gICAgLy8gICAgYXZvaWRMaXN0LnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcclxuICAgIC8vICAgIGF2b2lkTGlzdC5zaG91bGQuZXFsKGRyaXZlci5qd3BQcm94eUF2b2lkKTtcclxuICAgIC8vICB9KTtcclxuICAgIC8vICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHNlc3Npb24gaWQgaXMgd3JvbmcnLCAoKSA9PiB7XHJcbiAgICAvLyAgICAoKCkgPT4geyBkcml2ZXIuZ2V0UHJveHlBdm9pZExpc3QoJ2FhYScpOyB9KS5zaG91bGQudGhyb3c7XHJcbiAgICAvLyAgfSk7XHJcbiAgICAvL30pO1xyXG5cclxuICAgIGRlc2NyaWJlKCcjY2FuUHJveHknLCAoKSA9PiB7XHJcbiAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCAoKSA9PiB7XHJcbiAgICAgICAgZHJpdmVyLmNhblByb3h5LnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEZ1bmN0aW9uKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUnLCAoKSA9PiB7XHJcbiAgICAgICAgZHJpdmVyLmNhblByb3h5KCdhYmMnKS5zaG91bGQuYmUudHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgc2Vzc2lvbiBpZCBpcyB3cm9uZycsICgpID0+IHtcclxuICAgICAgICAoKCkgPT4geyBkcml2ZXIuY2FuUHJveHkoJ2FhYScpOyB9KS5zaG91bGQudGhyb3c7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=