'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _js2xmlparser2 = require("js2xmlparser2");

var _js2xmlparser22 = _interopRequireDefault(_js2xmlparser2);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var commands = {},
    helpers = {},
    extensions = {};

commands.active = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.executeAtom('active_element', []));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand("au.getActiveElement()"));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getDeviceTime = function callee$0$0() {
  var idevicedate, _ref, stdout, date;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Attempting to capture iOS device date and time');

        if (!this.isRealDevice()) {
          context$1$0.next = 20;
          break;
        }

        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('idevicedate'));

      case 5:
        idevicedate = context$1$0.sent;

        _logger2['default'].info('Found idevicedate: \'' + idevicedate + '\'');
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(idevicedate, ['-u', this.opts.udid]));

      case 9:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        date = new Date(stdout.trim());
        return context$1$0.abrupt('return', date.toString());

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](2);

        _logger2['default'].errorAndThrow('Could not capture device date and time using libimobiledevice idevicedate. ' + 'Libimobiledevice is probably not installed');

      case 18:
        context$1$0.next = 22;
        break;

      case 20:
        _logger2['default'].warn('On simulator. Assuming device time is the same as host time');
        return context$1$0.abrupt('return', new Date().toString());

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 15]]);
};

commands.hideKeyboard = function callee$0$0(strategy) {
  for (var _len = arguments.length, possibleKeys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    possibleKeys[_key - 1] = arguments[_key];
  }

  var cmd, key;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        possibleKeys.pop(); // last parameter is the session id
        cmd = undefined;
        key = _lodash2['default'].find(possibleKeys, function (k) {
          return k;
        });

        if (key) {
          strategy = strategy || 'pressKey';
          cmd = 'au.hideKeyboard(\'' + strategy + '\', \'' + key + '\')';
        } else {
          strategy = strategy || 'default';
          cmd = 'au.hideKeyboard(\'' + strategy + '\')';
        }
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(cmd));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getPageSource = function callee$0$0() {
  var cmd, jsonSource, xmlSource;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 7;
          break;
        }

        cmd = 'document.getElementsByTagName("html")[0].outerHTML';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.remote.execute(cmd));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getSourceForElementForXML());

      case 9:
        jsonSource = context$1$0.sent;

        if (typeof jsonSource === "string") {
          jsonSource = JSON.parse(jsonSource);
        }
        xmlSource = (0, _js2xmlparser22['default'])("AppiumAUT", jsonSource, {
          wrapArray: { enabled: false, elementName: "element" },
          declaration: { include: true },
          prettyPrinting: { indentString: "    " }
        });
        return context$1$0.abrupt('return', xmlSource);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.background = function callee$0$0(secs) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.background(' + secs + ')'));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.lock = function callee$0$0(secs) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!secs) {
          _logger2['default'].debug('No seconds parameter. Using 0 seconds');
          secs = 0;
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.lock(' + secs + ')'));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.closeApp = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.stop());

      case 3:
        _logger2['default'].info('Successfully closed the [' + this.opts.app + '] app.');
        context$1$0.next = 10;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].warn('Something went wrong while closing the [' + this.opts.app + '] app.');
        throw context$1$0.t0;

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 6]]);
};

commands.launchApp = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.start());

      case 3:
        _logger2['default'].info('Successfully launched the [' + this.opts.app + '] app.');
        context$1$0.next = 10;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].warn('Something went wrong while launching the [' + this.opts.app + '] app.');
        throw context$1$0.t0;

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 6]]);
};

commands.removeApp = function callee$0$0(bundleId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isRealDevice()) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.realDevice.remove(bundleId));

      case 3:
        context$1$0.next = 7;
        break;

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.sim.removeApp(bundleId));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.keys = function callee$0$0(keys) {
  var el, command;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.active());

      case 3:
        el = context$1$0.sent;

        if (!_lodash2['default'].isUndefined(el.ELEMENT)) {
          context$1$0.next = 6;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchElementError();

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.setValue(keys, el.ELEMENT));

      case 8:
        context$1$0.next = 16;
        break;

      case 10:
        if (_lodash2['default'].isArray(keys)) {
          keys = keys.join('');
        }
        if (!_lodash2['default'].isString(keys)) {
          keys = keys.toString();
        }
        keys = _appiumSupport.util.escapeSpecialChars(keys, "'");
        command = 'au.sendKeysToActiveElement(\'' + keys + '\')';
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setGeoLocation = function callee$0$0(location) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('target.setLocation(' + JSON.stringify(location) + ')'));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

//}
commands.getWindowSize = function callee$0$0() {
  var windowHandle = arguments.length <= 0 || arguments[0] === undefined ? "current" : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(windowHandle !== "current")) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotYetImplementedError("Currently only getting current window size is supported.");

      case 2:
        if (!this.isWebContext()) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.executeAtom('get_window_size', []));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand("au.getWindowSize()"));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getStrings = function callee$0$0(language) {
  var stringFile = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var strings;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Gettings strings for language \'' + language + '\' and string file \'' + stringFile + '\'');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_utils2['default'].parseLocalizableStrings(_lodash2['default'].defaults({ language: language, stringFile: stringFile }, this.opts)));

      case 3:
        strings = context$1$0.sent;

        if (strings && strings.length >= 1) {
          strings = strings[0];
        }
        return context$1$0.abrupt('return', strings);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// TODO: check the hasOptions bit, the method signature should be location, option

//let hasOptions = altitude !== null || horizontalAccuracy !== null || verticalAccuracy !== null || course !== null || speed !== null;
//if (hasOptions) {
//let options = {};
//if (altitude !== null) {
//options.altitude = altitude;
//}
//if (horizontalAccuracy !== null) {
//options.horizontalAccuracy = horizontalAccuracy;
//}
//if (verticalAccuracy !== null) {
//options.verticalAccuracy = verticalAccuracy;
//}
//if (course !== null) {
//options.course = course;
//}
//if (speed !== null) {
//options.speed = speed;
//}
//await this.uiAutoClient.sendCommand(
//`target.setLocationWithOptions(${JSON.stringify(coordinates)}, ${JSON.stringify(options)})`);
//} else {
//# sourceMappingURL=data:application/json;base64,