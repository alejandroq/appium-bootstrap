require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _libSimulatorXcode6 = require('../../lib/simulator-xcode-6');

var _libSimulatorXcode62 = _interopRequireDefault(_libSimulatorXcode6);

var _libSimulatorXcode7 = require('../../lib/simulator-xcode-7');

var _libSimulatorXcode72 = _interopRequireDefault(_libSimulatorXcode7);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumSupport = require('appium-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var simulatorClasses = {
  SimulatorXcode6: _libSimulatorXcode62['default'],
  SimulatorXcode7: _libSimulatorXcode72['default']
};

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  var _loop = function () {
    var _step$value = _slicedToArray(_step.value, 2);

    var name = _step$value[0];
    var simClass = _step$value[1];

    describe('common methods - ' + name, function () {
      var sim = undefined;
      beforeEach(function () {
        sim = new simClass('123', '6.0.0');
      });

      it('should exist', function () {
        simClass.should.exist;
      });

      it('should return a path for getDir()', function () {
        sim.getDir().should.exist;
      });

      it('should return an array for getAppDirs()', function callee$2$0() {
        var dirs;
        return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
          while (1) switch (context$3$0.prev = context$3$0.next) {
            case 0:
              _sinon2['default'].stub(sim, 'getAppDir').returns(_Promise.resolve(['/App/Path/']));
              sim._platformVersion = 9.1;
              context$3$0.next = 4;
              return _regeneratorRuntime.awrap(sim.getAppDirs('test'));

            case 4:
              dirs = context$3$0.sent;

              dirs.should.have.length(2);
              dirs.should.be.a('array');
              _sinon2['default'].restore();

            case 8:
            case 'end':
              return context$3$0.stop();
          }
        }, null, _this);
      });

      describe('cleanCustomApp', function () {
        var sandbox = undefined;
        var appBundleId = 'com.some.app';
        beforeEach(function () {
          sandbox = _sinon2['default'].sandbox.create();
          sandbox.spy(_appiumSupport.fs, 'rimraf');
        });
        afterEach(function () {
          sandbox.restore();
        });
        it('should not delete anything if no directories are found', function callee$3$0() {
          return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
              case 0:
                sandbox.stub(sim, 'getPlatformVersion').returns(_Promise.resolve(7.1));
                sandbox.stub(sim, 'getAppDir').returns(_Promise.resolve());
                context$4$0.next = 4;
                return _regeneratorRuntime.awrap(sim.cleanCustomApp('someApp', 'com.some.app'));

              case 4:
                _sinon2['default'].assert.notCalled(_appiumSupport.fs.rimraf);

              case 5:
              case 'end':
                return context$4$0.stop();
            }
          }, null, _this);
        });
        it('should delete app directories', function callee$3$0() {
          return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
              case 0:
                sandbox.stub(sim, 'getPlatformVersion').returns(_Promise.resolve(7.1));
                sandbox.stub(sim, 'getAppDirs').returns(_Promise.resolve(['/some/path', '/another/path']));
                context$4$0.next = 4;
                return _regeneratorRuntime.awrap(sim.cleanCustomApp('someApp', 'com.some.app'));

              case 4:
                _sinon2['default'].assert.called(_appiumSupport.fs.rimraf);

              case 5:
              case 'end':
                return context$4$0.stop();
            }
          }, null, _this);
        });
        it('should delete plist file for iOS8+', function callee$3$0() {
          return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
              case 0:
                sandbox.stub(sim, 'getPlatformVersion').returns(_Promise.resolve(9));
                sandbox.stub(sim, 'getAppDirs').returns(_Promise.resolve(['/some/path', '/another/path']));
                context$4$0.next = 4;
                return _regeneratorRuntime.awrap(sim.cleanCustomApp('someApp', appBundleId));

              case 4:
                _sinon2['default'].assert.calledWithMatch(_appiumSupport.fs.rimraf, /plist/);

              case 5:
              case 'end':
                return context$4$0.stop();
            }
          }, null, _this);
        });
        it('should not delete plist file for iOS7.1', function callee$3$0() {
          return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
              case 0:
                sandbox.stub(sim, 'getPlatformVersion').returns(_Promise.resolve(7.1));
                sandbox.stub(sim, 'getAppDirs').returns(_Promise.resolve(['/some/path', '/another/path']));
                context$4$0.next = 4;
                return _regeneratorRuntime.awrap(sim.cleanCustomApp('someApp', appBundleId));

              case 4:
                _sinon2['default'].assert.neverCalledWithMatch(_appiumSupport.fs.rimraf, /plist/);

              case 5:
              case 'end':
                return context$4$0.stop();
            }
          }, null, _this);
        });
      });

      it('should return a path for getLogDir', function () {
        var home = process.env.HOME;
        process.env.HOME = __dirname;
        var logDir = sim.getLogDir();
        logDir.should.equal(__dirname + '/Library/Logs/CoreSimulator/123');
        process.env.HOME = home;
      });

      describe('getPlatformVersion', function () {
        var statStub = undefined;
        var platformVersion = 8.9;
        beforeEach(function () {
          statStub = _sinon2['default'].stub(sim, 'stat').returns({ sdk: platformVersion });
        });
        afterEach(function () {
          statStub.restore();
        });
        it('should get the correct platform version', function callee$3$0() {
          var pv;
          return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
              case 0:
                context$4$0.next = 2;
                return _regeneratorRuntime.awrap(sim.getPlatformVersion());

              case 2:
                pv = context$4$0.sent;

                pv.should.equal(platformVersion);

              case 4:
              case 'end':
                return context$4$0.stop();
            }
          }, null, _this);
        });
        it('should only call stat once', function callee$3$0() {
          var pv;
          return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
              case 0:
                context$4$0.next = 2;
                return _regeneratorRuntime.awrap(sim.getPlatformVersion());

              case 2:
                pv = context$4$0.sent;

                pv.should.equal(platformVersion);
                statStub.calledOnce.should.be['true'];

              case 5:
              case 'end':
                return context$4$0.stop();
            }
          }, null, _this);
        });
      });
    });
  };

  for (var _iterator = _getIterator(_lodash2['default'].toPairs(simulatorClasses)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    _loop();
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
