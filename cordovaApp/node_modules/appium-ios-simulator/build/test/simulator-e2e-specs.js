require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('..');

var _nodeSimctl = require('node-simctl');

var simctl = _interopRequireWildcard(_nodeSimctl);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumSupport = require('appium-support');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _sampleApps = require('sample-apps');

var _sampleApps2 = _interopRequireDefault(_sampleApps);

var _asyncbox = require('asyncbox');

var LONG_TIMEOUT = 240 * 1000;

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function runTests(deviceType) {
  describe('simulator ' + deviceType.version, function () {
    this.timeout(LONG_TIMEOUT);
    var udid = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.killAllSimulators)());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(simctl.createDevice('ios-simulator testing', deviceType.device, deviceType.version, 20000));

          case 2:
            udid = context$3$0.sent;

            // just need a little more space in the logs
            console.log('\n\n'); // eslint-disable-line no-console

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    afterEach(function callee$2$0() {
      var devicePresent;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(simctl.getDevices());

          case 2:
            context$3$0.t0 = deviceType.version;

            context$3$0.t1 = function (device) {
              return device.udid === udid;
            };

            context$3$0.t2 = context$3$0.sent[context$3$0.t0].filter(context$3$0.t1).length;
            devicePresent = context$3$0.t2 > 0;

            if (!devicePresent) {
              context$3$0.next = 11;
              break;
            }

            context$3$0.next = 9;
            return _regeneratorRuntime.awrap((0, _.killAllSimulators)());

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(simctl.deleteDevice(udid));

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should detect whether a simulator has been run before', function callee$2$0() {
      var sim;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.isFresh().should.eventually.equal(true));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(sim.launchAndQuit());

          case 7:
            if (!process.env.TRAVIS) {
              context$3$0.next = 10;
              break;
            }

            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(sim.launchAndQuit());

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(sim.isFresh().should.eventually.equal(false));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should launch and shutdown a sim', function callee$2$0() {
      var sim;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.launchAndQuit());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(sim.stat());

          case 7:
            context$3$0.sent.state.should.equal('Shutdown');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should launch and shutdown a sim, also starting safari', function callee$2$0() {
      var sim;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.launchAndQuit(true));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(sim.stat());

          case 7:
            context$3$0.sent.state.should.equal('Shutdown');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should clean a sim', function callee$2$0() {
      var sim;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.isFresh().should.eventually.equal(true));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(sim.launchAndQuit());

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(sim.isFresh().should.eventually.equal(false));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(sim.clean());

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(sim.isFresh().should.eventually.equal(true));

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should not find any TestApp data or bundle directories on a fresh simulator', function callee$2$0() {
      var sim, dirs;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.getAppDirs('TestApp', 'io.appium.TestApp'));

          case 5:
            dirs = context$3$0.sent;

            dirs.should.have.length(0);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should find both a data and bundle directory for TestApp', function callee$2$0() {
      var sim, dirs;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.run());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(simctl.installApp(udid, (0, _sampleApps2['default'])('TestApp')));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(simctl.launch(udid, 'io.appium.TestApp'));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(sim.getAppDirs('TestApp', 'io.appium.TestApp'));

          case 11:
            dirs = context$3$0.sent;

            dirs.should.have.length(2);
            dirs[0].should.contain('/Data/');
            dirs[1].should.contain('/Bundle/');

          case 15:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should be able to delete an app', function callee$2$0() {
      var sim, error;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.run());

          case 5:
            error = /The operation couldn’t be completed/;

            if (parseInt(process.env.DEVICE, 10) >= 10) {
              error = /The request was denied by service delegate/;
            }

            // should not be able to launch
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(simctl.launch(udid, 'io.appium.TestApp', 1).should.eventually.be.rejectedWith(error));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(simctl.installApp(udid, (0, _sampleApps2['default'])('TestApp')));

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(5, 1000, function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(simctl.launch(udid, 'io.appium.TestApp', 1));

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            }));

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(sim.removeApp('io.appium.TestApp'));

          case 15:
            context$3$0.next = 17;
            return _regeneratorRuntime.awrap(simctl.launch(udid, 'io.appium.TestApp', 1).should.eventually.be.rejectedWith(error));

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should delete custom app data', function callee$2$0() {
      var sim, dirs;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.run());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(simctl.installApp(udid, (0, _sampleApps2['default'])('TestApp')));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(simctl.launch(udid, 'io.appium.TestApp'));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(sim.cleanCustomApp('TestApp', 'io.appium.TestApp'));

          case 11:

            // clear paths to force the simulator to get a new list of directories
            sim.appDataBundlePaths = {};

            context$3$0.next = 14;
            return _regeneratorRuntime.awrap(sim.getAppDirs('TestApp', 'io.appium.TestApp'));

          case 14:
            dirs = context$3$0.sent;

            dirs.should.have.length(0);

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should delete a sim', function callee$2$0() {
      var numDevices, sim, numDevicesAfter;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(simctl.getDevices());

          case 2:
            context$3$0.t0 = deviceType.version;
            numDevices = context$3$0.sent[context$3$0.t0].length;

            numDevices.should.be.above(0);

            context$3$0.next = 7;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 7:
            sim = context$3$0.sent;
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(sim['delete']());

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(simctl.getDevices());

          case 12:
            context$3$0.t1 = deviceType.version;
            numDevicesAfter = context$3$0.sent[context$3$0.t1].length;

            numDevicesAfter.should.equal(numDevices - 1);

          case 15:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    var itText = 'should match a bundleId to its app directory on a used sim';
    var bundleId = 'com.apple.mobilesafari';
    if (deviceType.version === '7.1') {
      itText = 'should match an app to its app directory on a used sim';
      bundleId = 'MobileSafari';
    }
    it(itText, function callee$2$0() {
      var sim, path;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.launchAndQuit());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(sim.getAppDir(bundleId));

          case 7:
            path = context$3$0.sent;
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(path).should.eventually.be['true']);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    itText = 'should match a bundleId to its app directory on a fresh sim';
    bundleId = 'com.apple.mobilesafari';
    if (deviceType.version === '7.1') {
      itText = 'should match an app to its app directory on a fresh sim';
      bundleId = 'MobileSafari';
    }
    it(itText, function callee$2$0() {
      var sim, path;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.getAppDir(bundleId));

          case 5:
            path = context$3$0.sent;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(path).should.eventually.be['true']);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should start a sim using the "run" method', function callee$2$0() {
      var sim, stat;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.run());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(sim.stat());

          case 7:
            stat = context$3$0.sent;

            stat.state.should.equal('Booted');

            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(sim.shutdown());

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(sim.stat());

          case 13:
            stat = context$3$0.sent;

            stat.state.should.equal('Shutdown');

          case 15:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should be able to start safari', function callee$2$0() {
      var sim;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.run());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(sim.openUrl('http://apple.com'));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(sim.shutdown());

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    // this test to catch errors in openUrl, that arise from bad sims or certain versions of xcode
    it('should detect if a sim is running', function callee$2$0() {
      var sim, running;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.isRunning());

          case 5:
            running = context$3$0.sent;

            running.should.be['false'];

            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(sim.run());

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(sim.isRunning());

          case 11:
            running = context$3$0.sent;

            running.should.be['true'];

            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(sim.shutdown());

          case 15:
            context$3$0.next = 17;
            return _regeneratorRuntime.awrap(sim.isRunning());

          case 17:
            running = context$3$0.sent;

            running.should.be['false'];

          case 19:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should isolate sim', function callee$2$0() {
      var sim, numDevices;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 2:
            sim = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(sim.isolateSim());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(simctl.getDevices());

          case 7:
            context$3$0.t0 = deviceType.version;
            numDevices = context$3$0.sent[context$3$0.t0].length;

            numDevices.should.equal(1);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('reuse an already-created already-run simulator ' + deviceType.version, function () {
    this.timeout(LONG_TIMEOUT);
    var sim = undefined;
    before(function callee$2$0() {
      var udid;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.killAllSimulators)());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(simctl.createDevice('ios-simulator testing', deviceType.device, deviceType.version));

          case 4:
            udid = context$3$0.sent;
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(udid));

          case 7:
            sim = context$3$0.sent;
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(sim.run());

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(sim.shutdown());

          case 12:
            context$3$0.next = 14;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(4000));

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      var devicePresent;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(simctl.getDevices());

          case 2:
            context$3$0.t0 = deviceType.version;

            context$3$0.t1 = function (device) {
              return device.udid === sim.udid;
            };

            context$3$0.t2 = context$3$0.sent[context$3$0.t0].filter(context$3$0.t1).length;
            devicePresent = context$3$0.t2 > 0;

            if (!devicePresent) {
              context$3$0.next = 9;
              break;
            }

            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(simctl.deleteDevice(sim.udid));

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should start a sim using the "run" method', function callee$2$0() {
      var stat;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(sim.run());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(sim.stat());

          case 4:
            stat = context$3$0.sent;

            stat.state.should.equal('Booted');

            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(sim.shutdown());

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(sim.stat());

          case 10:
            stat = context$3$0.sent;

            stat.state.should.equal('Shutdown');

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
}

var deviceTypes = undefined;
if (!process.env.TRAVIS && !process.env.DEVICE) {
  console.log('Not on TRAVIS, testing all versions'); // eslint-disable-line no-console
  deviceTypes = [{
    version: '9.2',
    device: 'iPhone 6s'
  }, {
    version: '9.3',
    device: 'iPhone 6s'
  }, {
    version: '9.0',
    device: 'iPhone 6s'
  }, {
    version: '9.1',
    device: 'iPhone 6s'
  }];
} else {
  // on travis, we want to just do what we specify
  // travis also cannot at the moment create 9.0 and 9.1 sims
  // so only do these if testing somewhere else
  if (process.env.DEVICE === '9.3') {
    deviceTypes = [{
      version: '9.3',
      device: 'iPhone 6s'
    }];
  } else if (process.env.DEVICE === '9.2') {
    deviceTypes = [{
      version: '9.2',
      device: 'iPhone 6s'
    }];
  } else if (process.env.DEVICE === '10' || process.env.DEVICE === '10.0') {
    deviceTypes = [{
      version: '10.0',
      device: 'iPhone 6s'
    }];
  }
}

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(deviceTypes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var deviceType = _step.value;

    runTests(deviceType);
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

// only want to get rid of the device if it is present

// travis is flakey on this first test

// install & launch test app

// install & launch test app

// this remains somewhat flakey

// should not be able to launch anymore

// install & launch test app

// delete app directories

// only want to get rid of the device if it is present
//# sourceMappingURL=data:application/json;charset=utf8;base64,
