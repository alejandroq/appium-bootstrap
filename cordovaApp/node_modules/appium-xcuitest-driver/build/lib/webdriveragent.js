'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _teen_process = require('teen_process');

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumLogger = require('appium-logger');

var _simulatorManagementJs = require('./simulator-management.js');

var _utilsJs = require('./utils.js');

var agentLog = (0, _appiumLogger.getLogger)('WebDriverAgent');
var xcodeLog = (0, _appiumLogger.getLogger)('Xcode');
var iproxyLog = (0, _appiumLogger.getLogger)('iProxy');

var AGENT_PATH = _path2['default'].resolve(__dirname, '..', '..', 'WebDriverAgent', 'WebDriverAgent.xcodeproj');
var BOOTSTRAP_PATH = _path2['default'].resolve(__dirname, '..', '..', 'WebDriverAgent');
var AGENT_LOG_PREFIX = 'XCTStubApps[';
var AGENT_RUNNER_LOG_PREFIX = 'XCTRunner[';
var SIM_BRIDGE_LOG_PREFIX = 'CoreSimulatorBridge[';
var AGENT_STARTED_REGEX = /ServerURLHere->(.*)<-ServerURLHere/;
var LOG_STARTTIME_REGEX = /Built at (\w{3} [\d\s]\d \d{4} \d{2}:\d{2}:\d{2})/;
var REAL_DEVICE_LOGGER_PATH = 'idevicesyslog';

var WebDriverAgent = (function () {

  // agentPath (optional): Path to WebdriverAgent Executable (inside WebDriverAgent.app)

  function WebDriverAgent() {
    var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, WebDriverAgent);

    if (args.agentPath) {
      _logger2['default'].info('Custom agent path specified: ' + args.agentPath);
    } else {
      _logger2['default'].info('Using default agent: ' + AGENT_PATH);
    }

    if (args.bootstrapPath) {
      _logger2['default'].info('Custom bootstrap path specified: ' + args.bootstrapPath);
    } else {
      _logger2['default'].info('Using default bootstrap: ' + BOOTSTRAP_PATH);
    }

    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.host = args.host;
    this.realDevice = !!args.realDevice;

    this.agentPath = args.agentPath || AGENT_PATH;
    this.bootstrapPath = args.bootstrapPath || BOOTSTRAP_PATH;
    this.realDeviceLogger = args.realDeviceLogger || REAL_DEVICE_LOGGER_PATH;
    this.wdaLocalPort = args.wdaLocalPort;
    this.iosLogAlreadyShown = args.showIOSLog;
    this.showXcodeLog = !!args.showXcodeLog;
    this.xcodeConfigFile = args.xcodeConfigFile;
    this.keychainPath = args.keychainPath;
    this.keychainPassword = args.keychainPassword;
  }

  _createClass(WebDriverAgent, [{
    key: 'launch',
    value: function launch(sessionId) {
      var agentUrl, localport;
      return _regeneratorRuntime.async(function launch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Launching WebDriverAgent on the device');

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.agentPath));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            throw new Error('Trying to use WebDriverAgent project at \'' + this.agentPath + '\' but the ' + 'file does not exist');

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.checkForDependencies());

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.killHangingProcesses());

          case 9:
            if (!this.realDevice) {
              context$2$0.next = 15;
              break;
            }

            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.createRealDeviceLogsSubProcess());

          case 12:
            this.deviceLogs = context$2$0.sent;
            context$2$0.next = 18;
            break;

          case 15:
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.createSimLogsSubProcess());

          case 17:
            this.deviceLogs = context$2$0.sent;

          case 18:
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.createXcodeBuildSubProcess());

          case 20:
            this.xcodebuild = context$2$0.sent;
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(this.startXcodebuild());

          case 23:
            agentUrl = context$2$0.sent;

            this.url = _url2['default'].parse(agentUrl);

            this.url.hostname = 'localhost';

            if (!this.realDevice) {
              context$2$0.next = 32;
              break;
            }

            localport = this.wdaLocalPort || this.url.port;

            this.iproxy = this.createiProxySubProcess(localport, this.url.port);
            context$2$0.next = 31;
            return _regeneratorRuntime.awrap(this.startiproxy());

          case 31:
            this.url.port = localport;

          case 32:

            this.setupProxy(sessionId);

            return context$2$0.abrupt('return', agentUrl);

          case 34:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupProxy',
    value: function setupProxy(sessionId) {
      this.jwproxy = new _appiumBaseDriver.JWProxy({ server: this.url.hostname, port: this.url.port, base: '' });
      this.jwproxy.sessionId = sessionId;
      this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    }
  }, {
    key: 'checkForDependencies',
    value: function checkForDependencies() {
      var carthagePath;
      return _regeneratorRuntime.async(function checkForDependencies$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.which('carthage'));

          case 3:
            carthagePath = context$2$0.sent;

            _logger2['default'].debug('Carthage found: ' + carthagePath);
            context$2$0.next = 10;
            break;

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].info('Carthage not found. Install using `brew install carthage`');

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Carthage'));

          case 12:
            if (context$2$0.sent) {
              context$2$0.next = 16;
              break;
            }

            _logger2['default'].debug('Running WebDriverAgent bootstrap script to install dependencies');
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('/bin/bash', ['Scripts/bootstrap.sh', '-d'], { cwd: this.bootstrapPath }));

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Resources'));

          case 18:
            if (context$2$0.sent) {
              context$2$0.next = 22;
              break;
            }

            _logger2['default'].debug('Creating WebDriverAgent resources directory');
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(this.bootstrapPath + '/Resources'));

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Resources/WebDriverAgent.bundle'));

          case 24:
            if (context$2$0.sent) {
              context$2$0.next = 28;
              break;
            }

            _logger2['default'].debug('Creating WebDriverAgent resource bundle directory');
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(this.bootstrapPath + '/Resources/WebDriverAgent.bundle'));

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 7]]);
    }
  }, {
    key: 'createXcodeBuildSubProcess',
    value: function createXcodeBuildSubProcess() {
      var cmd, args, xcodebuild, logXcodeOutput;
      return _regeneratorRuntime.async(function createXcodeBuildSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            cmd = 'xcodebuild';
            args = ['build', 'test', '-project', this.agentPath, '-scheme', 'WebDriverAgentRunner', '-destination', 'id=' + this.device.udid, '-configuration', 'Debug'];

            if (this.realDevice) {
              cmd = _path2['default'].resolve(__dirname, '..', '..', 'bin', 'run-xcodebuild.sh');
              args = ['--project', this.agentPath, '--scheme', 'WebDriverAgentRunner', '--destination', 'id=' + this.device.udid];
              if (this.xcodeConfigFile) {
                _logger2['default'].debug('Using Xcode configuration file: \'' + this.xcodeConfigFile + '\'');
                args.push('--xcode-config-file', '"' + this.xcodeConfigFile + '"');
              }
              if (this.keychainPath && this.keychainPassword) {
                args.push('--keychain-path', this.keychainPath);
                args.push('--keychain-password', this.keychainPassword);
              }
            }

            _logger2['default'].debug('Beginning test with command \'' + cmd + ' ' + args.join(' ') + '\' ' + ('in directory \'' + this.bootstrapPath + '\''));
            xcodebuild = new _teen_process.SubProcess(cmd, args, { cwd: this.bootstrapPath });
            logXcodeOutput = this.showXcodeLog;

            xcodebuild.on('output', function (stdout, stderr) {
              var out = stdout || stderr;
              // we want to pull out the log file that is created, and highlight it
              // for diagnostic purposes
              if (out.indexOf('Writing diagnostic log for test session to') !== -1) {
                // pull out the first line that begins with the path separator
                // which *should* be the line indicating the log file generated
                var logLocation = _lodash2['default'].first(_lodash2['default'].remove(out.trim().split('\n'), function (v) {
                  return v.indexOf(_path2['default'].sep) === 0;
                }));
                _logger2['default'].debug('Log file for xcodebuild test: ' + logLocation);
              }

              // if we have an error we want to output the logs
              // otherwise the failure is inscrutible
              if (out.indexOf('Error Domain=') !== -1) {
                logXcodeOutput = true;
              }

              if (logXcodeOutput) {
                xcodeLog.info(out);
              }
            });

            return context$2$0.abrupt('return', xcodebuild);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createSimLogsSubProcess',
    value: function createSimLogsSubProcess() {
      var args, logs;
      return _regeneratorRuntime.async(function createSimLogsSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = ['-f', '-n', '0', _path2['default'].resolve(this.device.getLogDir(), 'system.log')];
            logs = new _teen_process.SubProcess('tail', args);

            this.setupLogging(logs, 'Sim');
            return context$2$0.abrupt('return', logs);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createiProxySubProcess',
    value: function createiProxySubProcess(localport, deviceport) {
      _logger2['default'].debug('Starting iproxy to forward traffic from local port ' + localport + ' to device port ' + deviceport + ' over USB');
      return new _teen_process.SubProcess('iproxy', [localport, deviceport, this.device.udid]);
    }
  }, {
    key: 'createRealDeviceLogsSubProcess',
    value: function createRealDeviceLogsSubProcess() {
      var checkForLogger, stat, logs;
      return _regeneratorRuntime.async(function createRealDeviceLogsSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            checkForLogger = function checkForLogger(logger) {
              return _regeneratorRuntime.async(function checkForLogger$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.which(logger));

                  case 3:
                    context$3$0.next = 10;
                    break;

                  case 5:
                    context$3$0.prev = 5;
                    context$3$0.t0 = context$3$0['catch'](0);
                    context$3$0.next = 9;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(logger));

                  case 9:
                    return context$3$0.abrupt('return', context$3$0.sent);

                  case 10:
                    return context$3$0.abrupt('return', true);

                  case 11:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, this, [[0, 5]]);
            };

            context$2$0.t0 = this.realDeviceLogger.indexOf('deviceconsole') !== -1;

            if (!context$2$0.t0) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.realDeviceLogger));

          case 5:
            context$2$0.t0 = context$2$0.sent;

          case 6:
            if (!context$2$0.t0) {
              context$2$0.next = 11;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(this.realDeviceLogger));

          case 9:
            stat = context$2$0.sent;

            if (stat.isDirectory()) {
              _logger2['default'].warn('Real device logger \'' + this.realDeviceLogger + '\' is a directory. Appending \'deviceconsole\' executable');
              this.realDeviceLogger = _path2['default'].resolve(this.realDeviceLogger, 'deviceconsole');
            }

          case 11:
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(checkForLogger(this.realDeviceLogger));

          case 13:
            if (context$2$0.sent) {
              context$2$0.next = 15;
              break;
            }

            throw new Error('Unable to find real device logging program \'' + this.realDeviceLogger + '\'');

          case 15:
            _logger2['default'].debug('Using real device logger \'' + this.realDeviceLogger + '\'');

            logs = new _teen_process.SubProcess(this.realDeviceLogger, ['-u', this.device.udid]);

            this.setupLogging(logs, 'Device');
            return context$2$0.abrupt('return', logs);

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupLogging',
    value: function setupLogging(logs, prefix) {
      var _this = this;

      var loggingStarted = !this.realDevice;
      var startTime = new Date();
      function shouldStartLogging(row) {
        var logRowParts = row.split(/\s+/);
        var logRowDate = new Date(startTime.getFullYear() + ' ' + logRowParts[0] + ' ' + logRowParts[1] + ' ' + logRowParts[2]);
        loggingStarted = logRowDate.isAfter(startTime);
        return loggingStarted;
      }

      function isPertinentLogLine(line) {
        return line.length && (line.indexOf(AGENT_LOG_PREFIX) !== -1 || line.indexOf(AGENT_RUNNER_LOG_PREFIX) !== -1 || line.indexOf(SIM_BRIDGE_LOG_PREFIX) !== -1);
      }

      if (this.realDevice && this.realDeviceLogger.indexOf('idevicesyslog') !== -1) {
        // we are using idevicesyslog, which sometimes cannot connect to the device
        // at which time the system will not be able to figure out that the process
        // has started
        logs.on('output', function (stdout, stderr) {
          var errorString = 'Could not start logger for udid';
          if (stdout.indexOf(errorString) !== -1 || stderr.indexOf(errorString) !== -1) {
            // unfortunately we have no way to stopping the process, so just log overtly
            var msg = 'The real device logger \'' + _this.realDeviceLogger + '\' was ' + 'unable to start log capture. Please try installing ' + '\'deviceconsole\' (\'npm install -g deviceconsole\') and ' + 'specify the path to it using the \'realDeviceLogger\' capability.';
            _logger2['default'].error(msg);
          }
        });
      }

      if (!this.iosLogAlreadyShown) {
        logs.on('output', function (stdout, stderr) {
          var out = stdout || stderr;
          // make sure we are not reading logs from before this test run
          if (!loggingStarted && !shouldStartLogging(out)) {
            return;
          }
          if (isPertinentLogLine(out)) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = _getIterator(out.split("\n").filter(Boolean)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var line = _step.value;

                agentLog.debug(prefix + ': ' + line);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        });
      }
    }
  }, {
    key: 'startXcodebuild',
    value: function startXcodebuild() {
      return _regeneratorRuntime.async(function startXcodebuild$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$2$0(resolve, reject) {
              var startTime, agentUrl, msg;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this2 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    this.xcodebuild.on('exit', function (code, signal) {
                      _logger2['default'].info('xcodebuild exited with code \'' + code + '\' and signal \'' + signal + '\'');
                      if (!signal && code !== 0) {
                        return reject(new Error('xcodebuild failed with code ' + code));
                      }
                    });

                    this.deviceLogs.on('exit', function (code) {
                      var msg = (_this2.realDevice ? 'System' : 'Simulator') + ' log exited with code \'' + code + '\'';
                      _logger2['default'].info(msg);
                      if (code) {
                        return reject(msg);
                      }
                    });

                    context$3$0.prev = 2;
                    startTime = new Date();
                    context$3$0.next = 6;
                    return _regeneratorRuntime.awrap(this.xcodebuild.start());

                  case 6:
                    context$3$0.next = 8;
                    return _regeneratorRuntime.awrap(this.waitForStart(startTime));

                  case 8:
                    agentUrl = context$3$0.sent;

                    resolve(agentUrl);
                    context$3$0.next = 17;
                    break;

                  case 12:
                    context$3$0.prev = 12;
                    context$3$0.t0 = context$3$0['catch'](2);
                    msg = 'Unable to start WebDriverAgent: ' + context$3$0.t0;

                    _logger2['default'].error(msg);
                    return context$3$0.abrupt('return', reject(msg));

                  case 17:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[2, 12]]);
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForStart',
    value: function waitForStart(startTime) {
      var agentUrl, lineCount, reachedEnd, showWaitingMessage, startDetector;
      return _regeneratorRuntime.async(function waitForStart$(context$2$0) {
        var _this4 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.realDevice) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _simulatorManagementJs.systemLogExists)(this.device));

          case 3:
            agentUrl = undefined;
            lineCount = 0;
            reachedEnd = !this.realDevice;
            showWaitingMessage = true;

            startDetector = function startDetector(stdout) {
              // on a real device there may already be system logs that need to be
              // passed before we get to the real startup logs, otherwise
              // we expect two lines, one after another
              //     Jul 20 13:03:57 iamPhone XCTRunner[296] <Warning>: Built at Jul 20 2016 13:03:50
              //     Jul 20 13:03:57 iamPhone XCTRunner[296] <Warning>: ServerURLHere->http://10.35.4.122:8100<-ServerURLHere
              if (!reachedEnd) {
                var dateMatch = LOG_STARTTIME_REGEX.exec(stdout);
                if (dateMatch) {
                  var buildTime = new Date(dateMatch[1]);
                  if (buildTime.isAfter(startTime)) {
                    reachedEnd = true;
                  }
                }
              }

              if (reachedEnd) {
                var match = AGENT_STARTED_REGEX.exec(stdout);
                if (match) {
                  agentUrl = match[1];
                  _logger2['default'].info('Detected that WebDriverAgent is running at url \'' + agentUrl + '\'');
                  if (!agentUrl) {
                    _logger2['default'].errorAndThrow(new Error('No url detected from WebDriverAgent'));
                  }
                  showWaitingMessage = false;
                  return true;
                }
              }

              // periodically log, so it does not look like everything died
              lineCount++;
              var threshold = _this4.realDevice ? 5000 : 200;
              if (showWaitingMessage && lineCount % threshold === 0) {
                _logger2['default'].debug('Waiting for WebDriverAgent server to finish loading...');
              }

              return false;
            };

            _logger2['default'].info('Waiting for WebDriverAgent to start on device');
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.deviceLogs.start(startDetector));

          case 11:
            _logger2['default'].info('WebDriverAgent started at url \'' + agentUrl + '\'');

            return context$2$0.abrupt('return', agentUrl);

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startiproxy',
    value: function startiproxy() {
      return _regeneratorRuntime.async(function startiproxy$(context$2$0) {
        var _this5 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$2$0(resolve, reject) {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    this.iproxy.on('exit', function (code) {
                      _logger2['default'].warn('iproxy exited ' + (code ? 'with code ${code}' : ''));
                      if (code) {
                        return reject(new Error('iproxy exited with code \'' + code + '\''));
                      }
                    });
                    this.iproxy.on('output', function (stdout, stderr) {
                      var out = stdout || stderr;
                      var _iteratorNormalCompletion2 = true;
                      var _didIteratorError2 = false;
                      var _iteratorError2 = undefined;

                      try {
                        for (var _iterator2 = _getIterator(out.split('\n')), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                          var line = _step2.value;

                          if (!line.length) continue;
                          iproxyLog.debug(line);
                        }
                      } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                            _iterator2['return']();
                          }
                        } finally {
                          if (_didIteratorError2) {
                            throw _iteratorError2;
                          }
                        }
                      }
                    });

                    context$3$0.prev = 2;
                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap(this.iproxy.start(5000));

                  case 5:
                    resolve();
                    context$3$0.next = 12;
                    break;

                  case 8:
                    context$3$0.prev = 8;
                    context$3$0.t0 = context$3$0['catch'](2);

                    _logger2['default'].error('Error starting iproxy: \'' + context$3$0.t0.message + '\'');
                    reject('Unable to start iproxy. Is it installed?');

                  case 12:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this5, [[2, 8]]);
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'killHangingProcesses',
    value: function killHangingProcesses() {
      var procNames, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, proc;

      return _regeneratorRuntime.async(function killHangingProcesses$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Killing hanging processes');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _utilsJs.killAppUsingAppName)(this.device.udid, 'xcodebuild'));

          case 3:
            procNames = this.realDevice ? [this.realDeviceLogger, 'iproxy'] : ['tail', 'XCTRunner'];
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            context$2$0.prev = 7;
            _iterator3 = _getIterator(procNames);

          case 9:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              context$2$0.next = 16;
              break;
            }

            proc = _step3.value;
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _utilsJs.killAppUsingAppName)(this.device.udid, proc));

          case 13:
            _iteratorNormalCompletion3 = true;
            context$2$0.next = 9;
            break;

          case 16:
            context$2$0.next = 22;
            break;

          case 18:
            context$2$0.prev = 18;
            context$2$0.t0 = context$2$0['catch'](7);
            _didIteratorError3 = true;
            _iteratorError3 = context$2$0.t0;

          case 22:
            context$2$0.prev = 22;
            context$2$0.prev = 23;

            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }

          case 25:
            context$2$0.prev = 25;

            if (!_didIteratorError3) {
              context$2$0.next = 28;
              break;
            }

            throw _iteratorError3;

          case 28:
            return context$2$0.finish(25);

          case 29:
            return context$2$0.finish(22);

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
    }
  }, {
    key: 'quit',
    value: function quit() {
      var getStopPromises;
      return _regeneratorRuntime.async(function quit$(context$2$0) {
        var _this6 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Shutting down WebDriverAgent');

            getStopPromises = function getStopPromises(signal) {
              var stops = [];
              if (_this6.xcodebuild && _this6.xcodebuild.proc) {
                stops.push(_this6.xcodebuild.stop(signal));
              }
              if (_this6.deviceLogs && _this6.deviceLogs.proc) {
                stops.push(_this6.deviceLogs.stop(signal));
              }
              if (_this6.iproxy && _this6.iproxy.proc) {
                stops.push(_this6.iproxy.stop(signal));
              }
              return stops;
            };

            if (this.jwproxy) {
              this.jwproxy.sessionId = null;
            }

            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all(getStopPromises()));

          case 6:
            context$2$0.next = 15;
            break;

          case 8:
            context$2$0.prev = 8;
            context$2$0.t0 = context$2$0['catch'](3);

            if (!(context$2$0.t0.message.indexOf('Process didn\'t end after') === -1)) {
              context$2$0.next = 12;
              break;
            }

            throw context$2$0.t0;

          case 12:
            _logger2['default'].debug('WebDriverAgent process did not end in a timely fashion. ' + 'Sending SIGHUP signal...');
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all(getStopPromises('SIGHUP')));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 8]]);
    }
  }]);

  return WebDriverAgent;
})();

exports['default'] = WebDriverAgent;
module.exports = exports['default'];

// make sure that the WDA library has been built

//kill all hanging processes

// start the logging process

// start the xcodebuild process

// the logger can be the name of a program on the PATH
// or a path to the program

// not on the PATH, so see if it is an accessible path itself

// no error thrown, so all is well

// the user might have passed in the directory for `deviceconsole`, in which case we want to
// make sure we use the executable

// we have no logger

// wrap the start procedure in a promise so that we can catch, and report,
// any startup errors that are thrown as events

// we have to wait for the sim to start before we can tail the log file
// simulator does not need to wait, since we are tailing
// turn off logging once we have hit the end
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJkcml2ZXJhZ2VudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7b0JBQ0wsTUFBTTs7OzttQkFDUCxLQUFLOzs7O3dCQUNQLFVBQVU7Ozs7NEJBQ1MsY0FBYzs7Z0NBQ3ZCLG9CQUFvQjs7NkJBQ3pCLGdCQUFnQjs7c0JBQ25CLFVBQVU7Ozs7NEJBQ0EsZUFBZTs7cUNBQ1QsMkJBQTJCOzt1QkFDdkIsWUFBWTs7QUFFaEQsSUFBTSxRQUFRLEdBQUcsNkJBQVUsZ0JBQWdCLENBQUMsQ0FBQztBQUM3QyxJQUFNLFFBQVEsR0FBRyw2QkFBVSxPQUFPLENBQUMsQ0FBQztBQUNwQyxJQUFNLFNBQVMsR0FBRyw2QkFBVSxRQUFRLENBQUMsQ0FBQzs7QUFFdEMsSUFBTSxVQUFVLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLDBCQUEwQixDQUFDLENBQUM7QUFDckcsSUFBTSxjQUFjLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDN0UsSUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUM7QUFDeEMsSUFBTSx1QkFBdUIsR0FBRyxZQUFZLENBQUM7QUFDN0MsSUFBTSxxQkFBcUIsR0FBRyxzQkFBc0IsQ0FBQztBQUNyRCxJQUFNLG1CQUFtQixHQUFHLG9DQUFvQyxDQUFDO0FBQ2pFLElBQU0sbUJBQW1CLEdBQUcsbURBQW1ELENBQUM7QUFDaEYsSUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUM7O0lBRTFDLGNBQWM7Ozs7QUFHTixXQUhSLGNBQWMsR0FHTTtRQUFYLElBQUkseURBQUcsRUFBRTs7MEJBSGxCLGNBQWM7O0FBSWhCLFFBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUNsQiwwQkFBSSxJQUFJLG1DQUFpQyxJQUFJLENBQUMsU0FBUyxDQUFHLENBQUM7S0FDNUQsTUFBTTtBQUNMLDBCQUFJLElBQUksMkJBQXlCLFVBQVUsQ0FBRyxDQUFDO0tBQ2hEOztBQUVELFFBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtBQUN0QiwwQkFBSSxJQUFJLHVDQUFxQyxJQUFJLENBQUMsYUFBYSxDQUFHLENBQUM7S0FDcEUsTUFBTTtBQUNMLDBCQUFJLElBQUksK0JBQTZCLGNBQWMsQ0FBRyxDQUFDO0tBQ3hEOztBQUVELFFBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMxQixRQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDNUMsUUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3RCLFFBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7O0FBRXBDLFFBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxVQUFVLENBQUM7QUFDOUMsUUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxJQUFJLGNBQWMsQ0FBQztBQUMxRCxRQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixJQUFJLHVCQUF1QixDQUFDO0FBQ3pFLFFBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztBQUN0QyxRQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMxQyxRQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQ3hDLFFBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUM1QyxRQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDdEMsUUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztHQUMvQzs7ZUE5QkcsY0FBYzs7V0FnQ0wsZ0JBQUMsU0FBUztVQXdCakIsUUFBUSxFQU1OLFNBQVM7Ozs7QUE3QmYsZ0NBQUksSUFBSSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Ozs2Q0FFeEMsa0JBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7Ozs7Ozs7O2tCQUM1QixJQUFJLEtBQUssQ0FBQywrQ0FBNEMsSUFBSSxDQUFDLFNBQVMsbUJBQzFELHFCQUFxQixDQUFDOzs7OzZDQUlsQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7Ozs7NkNBRzNCLElBQUksQ0FBQyxvQkFBb0IsRUFBRTs7O2lCQUc3QixJQUFJLENBQUMsVUFBVTs7Ozs7OzZDQUNPLElBQUksQ0FBQyw4QkFBOEIsRUFBRTs7O0FBQTdELGdCQUFJLENBQUMsVUFBVTs7Ozs7OzZDQUVTLElBQUksQ0FBQyx1QkFBdUIsRUFBRTs7O0FBQXRELGdCQUFJLENBQUMsVUFBVTs7Ozs2Q0FHTyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7OztBQUF6RCxnQkFBSSxDQUFDLFVBQVU7OzZDQUdNLElBQUksQ0FBQyxlQUFlLEVBQUU7OztBQUF2QyxvQkFBUTs7QUFFWixnQkFBSSxDQUFDLEdBQUcsR0FBRyxpQkFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRS9CLGdCQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUM7O2lCQUM1QixJQUFJLENBQUMsVUFBVTs7Ozs7QUFDYixxQkFBUyxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJOztBQUNsRCxnQkFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7OzZDQUM5RCxJQUFJLENBQUMsV0FBVyxFQUFFOzs7QUFDeEIsZ0JBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQzs7OztBQUc1QixnQkFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Z0RBRXBCLFFBQVE7Ozs7Ozs7S0FDaEI7OztXQUVVLG9CQUFDLFNBQVMsRUFBRTtBQUNyQixVQUFJLENBQUMsT0FBTyxHQUFHLDhCQUFZLEVBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQztBQUN2RixVQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDbkMsVUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2hFOzs7V0FFMEI7VUFFbkIsWUFBWTs7Ozs7OzZDQUFTLGtCQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7OztBQUF6Qyx3QkFBWTs7QUFDaEIsZ0NBQUksS0FBSyxzQkFBb0IsWUFBWSxDQUFHLENBQUM7Ozs7Ozs7O0FBRTdDLGdDQUFJLElBQUksQ0FBQywyREFBMkQsQ0FBQyxDQUFDOzs7OzZDQUU3RCxrQkFBRyxTQUFTLENBQUksSUFBSSxDQUFDLGFBQWEsZUFBWTs7Ozs7Ozs7QUFDdkQsZ0NBQUksS0FBSyxDQUFDLGlFQUFpRSxDQUFDLENBQUM7OzZDQUN2RSx3QkFBSyxXQUFXLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFDLENBQUM7Ozs7NkNBRXpFLGtCQUFHLFNBQVMsQ0FBSSxJQUFJLENBQUMsYUFBYSxnQkFBYTs7Ozs7Ozs7QUFDeEQsZ0NBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7OzZDQUNuRCxrQkFBRyxLQUFLLENBQUksSUFBSSxDQUFDLGFBQWEsZ0JBQWE7Ozs7NkNBRXhDLGtCQUFHLFNBQVMsQ0FBSSxJQUFJLENBQUMsYUFBYSxzQ0FBbUM7Ozs7Ozs7O0FBQzlFLGdDQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDOzs2Q0FDekQsa0JBQUcsS0FBSyxDQUFJLElBQUksQ0FBQyxhQUFhLHNDQUFtQzs7Ozs7OztLQUUxRTs7O1dBRWdDO1VBQzNCLEdBQUcsRUFDSCxJQUFJLEVBNEJKLFVBQVUsRUFFVixjQUFjOzs7O0FBL0JkLGVBQUcsR0FBRyxZQUFZO0FBQ2xCLGdCQUFJLEdBQUcsQ0FDVCxPQUFPLEVBQ1AsTUFBTSxFQUNOLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUMxQixTQUFTLEVBQUUsc0JBQXNCLEVBQ2pDLGNBQWMsVUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFDdEMsZ0JBQWdCLEVBQUUsT0FBTyxDQUMxQjs7QUFFRCxnQkFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ25CLGlCQUFHLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3RFLGtCQUFJLEdBQUcsQ0FDTCxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFDM0IsVUFBVSxFQUFFLHNCQUFzQixFQUNsQyxlQUFlLFVBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3hDLENBQUM7QUFDRixrQkFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQ3hCLG9DQUFJLEtBQUssd0NBQXFDLElBQUksQ0FBQyxlQUFlLFFBQUksQ0FBQztBQUN2RSxvQkFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsUUFBTSxJQUFJLENBQUMsZUFBZSxPQUFJLENBQUM7ZUFDL0Q7QUFDRCxrQkFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUM5QyxvQkFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDaEQsb0JBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7ZUFDekQ7YUFDRjs7QUFFRCxnQ0FBSSxLQUFLLENBQUMsbUNBQWdDLEdBQUcsU0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQ0FDcEMsSUFBSSxDQUFDLGFBQWEsUUFBRyxDQUFDLENBQUM7QUFDOUMsc0JBQVUsR0FBRyw2QkFBZSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUMsQ0FBQztBQUVqRSwwQkFBYyxHQUFHLElBQUksQ0FBQyxZQUFZOztBQUN0QyxzQkFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsVUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFLO0FBQzFDLGtCQUFJLEdBQUcsR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDOzs7QUFHM0Isa0JBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOzs7QUFHcEUsb0JBQUksV0FBVyxHQUFHLG9CQUFFLEtBQUssQ0FBQyxvQkFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFDLENBQUM7eUJBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrQkFBSyxHQUFHLENBQUMsS0FBSyxDQUFDO2lCQUFBLENBQUMsQ0FBQyxDQUFDO0FBQzlGLG9DQUFJLEtBQUssb0NBQWtDLFdBQVcsQ0FBRyxDQUFDO2VBQzNEOzs7O0FBSUQsa0JBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUN2Qyw4QkFBYyxHQUFHLElBQUksQ0FBQztlQUN2Qjs7QUFFRCxrQkFBSSxjQUFjLEVBQUU7QUFDbEIsd0JBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7ZUFDcEI7YUFDRixDQUFDLENBQUM7O2dEQUVJLFVBQVU7Ozs7Ozs7S0FDbEI7OztXQUU2QjtVQUN4QixJQUFJLEVBTUosSUFBSTs7OztBQU5KLGdCQUFJLEdBQUcsQ0FDVCxJQUFJLEVBQ0osSUFBSSxFQUFFLEdBQUcsRUFDVCxrQkFBSyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FDcEQ7QUFFRyxnQkFBSSxHQUFHLDZCQUFlLE1BQU0sRUFBRSxJQUFJLENBQUM7O0FBQ3ZDLGdCQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztnREFDeEIsSUFBSTs7Ozs7OztLQUNaOzs7V0FFc0IsZ0NBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRTtBQUM3QywwQkFBSSxLQUFLLHlEQUF1RCxTQUFTLHdCQUFtQixVQUFVLGVBQVksQ0FBQztBQUNuSCxhQUFPLHVDQUF5QixDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQzVFOzs7V0FFb0M7VUFDcEIsY0FBYyxFQWlCdkIsSUFBSSxFQWFOLElBQUk7Ozs7QUE5Qk8sMEJBQWMsWUFBZCxjQUFjLENBQUUsTUFBTTs7Ozs7O3FEQUkzQixrQkFBRyxLQUFLLENBQUMsTUFBTSxDQUFDOzs7Ozs7Ozs7O3FEQUdULGtCQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7Ozs7Ozt3REFJekIsSUFBSTs7Ozs7Ozs7OzZCQUdULElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7Ozs2Q0FBVSxrQkFBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDOzs7Ozs7Ozs7Ozs7NkNBR2hGLGtCQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7OztBQUEzQyxnQkFBSTs7QUFDUixnQkFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7QUFDdEIsa0NBQUksSUFBSSwyQkFBd0IsSUFBSSxDQUFDLGdCQUFnQiwrREFBeUQsQ0FBQztBQUMvRyxrQkFBSSxDQUFDLGdCQUFnQixHQUFHLGtCQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUM7YUFDOUU7Ozs7NkNBR1EsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7a0JBRXhDLElBQUksS0FBSyxtREFBZ0QsSUFBSSxDQUFDLGdCQUFnQixRQUFJOzs7QUFFMUYsZ0NBQUksS0FBSyxpQ0FBOEIsSUFBSSxDQUFDLGdCQUFnQixRQUFJLENBQUM7O0FBRTdELGdCQUFJLEdBQUcsNkJBQWUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBQzFFLGdCQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztnREFDM0IsSUFBSTs7Ozs7OztLQUNaOzs7V0FFWSxzQkFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFOzs7QUFDMUIsVUFBSSxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ3RDLFVBQUksU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7QUFDM0IsZUFBUyxrQkFBa0IsQ0FBRSxHQUFHLEVBQUU7QUFDaEMsWUFBSSxXQUFXLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxZQUFJLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFNBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUcsQ0FBQztBQUM5RyxzQkFBYyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0MsZUFBTyxjQUFjLENBQUM7T0FDdkI7O0FBRUQsZUFBUyxrQkFBa0IsQ0FBRSxJQUFJLEVBQUU7QUFDakMsZUFBTyxJQUFJLENBQUMsTUFBTSxLQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDO09BQ3BEOztBQUVELFVBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOzs7O0FBSTVFLFlBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBSztBQUNwQyxjQUFJLFdBQVcsR0FBRyxpQ0FBaUMsQ0FBQztBQUNwRCxjQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTs7QUFFNUUsZ0JBQUksR0FBRyxHQUFHLDhCQUEyQixNQUFLLGdCQUFnQixvRUFDSyw4REFDRSxzRUFDVSxDQUFDO0FBQzVFLGdDQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztXQUNoQjtTQUNGLENBQUMsQ0FBQztPQUNKOztBQUVELFVBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7QUFDNUIsWUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsVUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFLO0FBQ3BDLGNBQUksR0FBRyxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUM7O0FBRTNCLGNBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUMvQyxtQkFBTztXQUNSO0FBQ0QsY0FBSSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsRUFBRTs7Ozs7O0FBQzNCLGdEQUFpQixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsNEdBQUU7b0JBQXpDLElBQUk7O0FBQ1gsd0JBQVEsQ0FBQyxLQUFLLENBQUksTUFBTSxVQUFLLElBQUksQ0FBRyxDQUFDO2VBQ3RDOzs7Ozs7Ozs7Ozs7Ozs7V0FDRjtTQUNGLENBQUMsQ0FBQztPQUNKO0tBQ0Y7OztXQUVxQjs7Ozs7Ozs2Q0FHUCwwQkFBTSxvQkFBTyxPQUFPLEVBQUUsTUFBTTtrQkFpQmpDLFNBQVMsRUFFVCxRQUFRLEVBR1IsR0FBRzs7Ozs7O0FBckJULHdCQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFLO0FBQzNDLDBDQUFJLElBQUksb0NBQWlDLElBQUksd0JBQWlCLE1BQU0sUUFBSSxDQUFDO0FBQ3pFLDBCQUFJLENBQUMsTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7QUFDekIsK0JBQU8sTUFBTSxDQUFDLElBQUksS0FBSyxrQ0FBZ0MsSUFBSSxDQUFHLENBQUMsQ0FBQzt1QkFDakU7cUJBQ0YsQ0FBQyxDQUFDOztBQUVILHdCQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQyxJQUFJLEVBQUs7QUFDbkMsMEJBQUksR0FBRyxJQUFNLE9BQUssVUFBVSxHQUFHLFFBQVEsR0FBRyxXQUFXLENBQUEsZ0NBQTBCLElBQUksT0FBRyxDQUFDO0FBQ3ZGLDBDQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLDBCQUFJLElBQUksRUFBRTtBQUNSLCtCQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzt1QkFDcEI7cUJBQ0YsQ0FBQyxDQUFDOzs7QUFHRyw2QkFBUyxHQUFHLElBQUksSUFBSSxFQUFFOztxREFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUU7Ozs7cURBQ1IsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7OztBQUE3Qyw0QkFBUTs7QUFDWiwyQkFBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7Ozs7O0FBRWQsdUJBQUc7O0FBQ1Asd0NBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dEQUNSLE1BQU0sQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7YUFFckIsQ0FBQzs7Ozs7Ozs7OztLQUNIOzs7V0FFa0Isc0JBQUMsU0FBUztVQU12QixRQUFRLEVBQ1IsU0FBUyxFQUNULFVBQVUsRUFDVixrQkFBa0IsRUFFbEIsYUFBYTs7Ozs7O2dCQVRaLElBQUksQ0FBQyxVQUFVOzs7Ozs7NkNBQ1osNENBQWdCLElBQUksQ0FBQyxNQUFNLENBQUM7OztBQUdoQyxvQkFBUTtBQUNSLHFCQUFTLEdBQUcsQ0FBQztBQUNiLHNCQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUM3Qiw4QkFBa0IsR0FBRyxJQUFJOztBQUV6Qix5QkFBYSxHQUFHLFNBQWhCLGFBQWEsQ0FBSSxNQUFNLEVBQUs7Ozs7OztBQU05QixrQkFBSSxDQUFDLFVBQVUsRUFBRTtBQUNmLG9CQUFJLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsb0JBQUksU0FBUyxFQUFFO0FBQ2Isc0JBQUksU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLHNCQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDaEMsOEJBQVUsR0FBRyxJQUFJLENBQUM7bUJBQ25CO2lCQUNGO2VBQ0Y7O0FBRUQsa0JBQUksVUFBVSxFQUFFO0FBQ2Qsb0JBQUksS0FBSyxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QyxvQkFBSSxLQUFLLEVBQUU7QUFDVCwwQkFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQixzQ0FBSSxJQUFJLHVEQUFvRCxRQUFRLFFBQUksQ0FBQztBQUN6RSxzQkFBSSxDQUFDLFFBQVEsRUFBRTtBQUNiLHdDQUFJLGFBQWEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDLENBQUM7bUJBQ3JFO0FBQ0Qsb0NBQWtCLEdBQUcsS0FBSyxDQUFDO0FBQzNCLHlCQUFPLElBQUksQ0FBQztpQkFDYjtlQUNGOzs7QUFHRCx1QkFBUyxFQUFFLENBQUM7QUFDWixrQkFBSSxTQUFTLEdBQUcsT0FBSyxVQUFVLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUM3QyxrQkFBSSxrQkFBa0IsSUFBSSxTQUFTLEdBQUcsU0FBUyxLQUFLLENBQUMsRUFBRTtBQUNyRCxvQ0FBSSxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztlQUNyRTs7QUFFRCxxQkFBTyxLQUFLLENBQUM7YUFDZDs7QUFFRCxnQ0FBSSxJQUFJLENBQUMsK0NBQStDLENBQUMsQ0FBQzs7NkNBQ3BELElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7O0FBQzFDLGdDQUFJLElBQUksc0NBQW1DLFFBQVEsUUFBSSxDQUFDOztnREFFakQsUUFBUTs7Ozs7OztLQUNoQjs7O1dBRWlCOzs7Ozs7OzZDQUNILDBCQUFNLG9CQUFPLE9BQU8sRUFBRSxNQUFNOzs7O0FBQ3ZDLHdCQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQyxJQUFJLEVBQUs7QUFDL0IsMENBQUksSUFBSSxxQkFBa0IsSUFBSSxHQUFHLG1CQUFtQixHQUFHLEVBQUUsQ0FBQSxDQUFHLENBQUM7QUFDN0QsMEJBQUksSUFBSSxFQUFFO0FBQ1IsK0JBQU8sTUFBTSxDQUFDLElBQUksS0FBSyxnQ0FBNkIsSUFBSSxRQUFJLENBQUMsQ0FBQzt1QkFDL0Q7cUJBQ0YsQ0FBQyxDQUFDO0FBQ0gsd0JBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUs7QUFDM0MsMEJBQUksR0FBRyxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUM7Ozs7OztBQUMzQiwyREFBaUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUhBQUU7OEJBQXpCLElBQUk7O0FBQ1gsOEJBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVM7QUFDM0IsbUNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7eUJBQ3ZCOzs7Ozs7Ozs7Ozs7Ozs7cUJBQ0YsQ0FBQyxDQUFDOzs7O3FEQUdLLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzs7O0FBQzdCLDJCQUFPLEVBQUUsQ0FBQzs7Ozs7Ozs7QUFFVix3Q0FBSSxLQUFLLCtCQUE0QixlQUFJLE9BQU8sUUFBSSxDQUFDO0FBQ3JELDBCQUFNLENBQUMsMENBQTBDLENBQUMsQ0FBQzs7Ozs7OzthQUV0RCxDQUFDOzs7Ozs7Ozs7O0tBQ0g7OztXQUUwQjtVQUdyQixTQUFTLHVGQUVKLElBQUk7Ozs7O0FBSmIsZ0NBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7OzZDQUNqQyxrQ0FBb0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGVBQWU7OztBQUNyRCxxQkFBUyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLEdBQ2pDLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQzs7Ozs7c0NBQ3RDLFNBQVM7Ozs7Ozs7O0FBQWpCLGdCQUFJOzs2Q0FDTCxrQ0FBb0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBRXBEOzs7V0FFVTtVQUVMLGVBQWU7Ozs7OztBQURuQixnQ0FBSSxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQzs7QUFDckMsMkJBQWUsR0FBRyxTQUFsQixlQUFlLENBQUksTUFBTSxFQUFLO0FBQ2hDLGtCQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDZixrQkFBSSxPQUFLLFVBQVUsSUFBSSxPQUFLLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFDM0MscUJBQUssQ0FBQyxJQUFJLENBQUMsT0FBSyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7ZUFDMUM7QUFDRCxrQkFBSSxPQUFLLFVBQVUsSUFBSSxPQUFLLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFDM0MscUJBQUssQ0FBQyxJQUFJLENBQUMsT0FBSyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7ZUFDMUM7QUFDRCxrQkFBSSxPQUFLLE1BQU0sSUFBSSxPQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUU7QUFDbkMscUJBQUssQ0FBQyxJQUFJLENBQUMsT0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7ZUFDdEM7QUFDRCxxQkFBTyxLQUFLLENBQUM7YUFDZDs7QUFFRCxnQkFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2hCLGtCQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7YUFDL0I7Ozs7NkNBR08sc0JBQUUsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDOzs7Ozs7Ozs7O2tCQUUxQixlQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTs7Ozs7Ozs7QUFHM0QsZ0NBQUksS0FBSyxDQUFDLDBEQUEwRCxHQUMxRCwwQkFBMEIsQ0FBQyxDQUFDOzs2Q0FDaEMsc0JBQUUsR0FBRyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7OztLQUV6Qzs7O1NBaGFHLGNBQWM7OztxQkFtYUwsY0FBYyIsImZpbGUiOiJsaWIvd2ViZHJpdmVyYWdlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBTdWJQcm9jZXNzLCBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IEpXUHJveHkgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ2FwcGl1bS1sb2dnZXInO1xuaW1wb3J0IHsgc3lzdGVtTG9nRXhpc3RzIH0gZnJvbSAnLi9zaW11bGF0b3ItbWFuYWdlbWVudC5qcyc7XG5pbXBvcnQgeyBraWxsQXBwVXNpbmdBcHBOYW1lIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmNvbnN0IGFnZW50TG9nID0gZ2V0TG9nZ2VyKCdXZWJEcml2ZXJBZ2VudCcpO1xuY29uc3QgeGNvZGVMb2cgPSBnZXRMb2dnZXIoJ1hjb2RlJyk7XG5jb25zdCBpcHJveHlMb2cgPSBnZXRMb2dnZXIoJ2lQcm94eScpO1xuXG5jb25zdCBBR0VOVF9QQVRIID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ1dlYkRyaXZlckFnZW50JywgJ1dlYkRyaXZlckFnZW50Lnhjb2RlcHJvaicpO1xuY29uc3QgQk9PVFNUUkFQX1BBVEggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnV2ViRHJpdmVyQWdlbnQnKTtcbmNvbnN0IEFHRU5UX0xPR19QUkVGSVggPSAnWENUU3R1YkFwcHNbJztcbmNvbnN0IEFHRU5UX1JVTk5FUl9MT0dfUFJFRklYID0gJ1hDVFJ1bm5lclsnO1xuY29uc3QgU0lNX0JSSURHRV9MT0dfUFJFRklYID0gJ0NvcmVTaW11bGF0b3JCcmlkZ2VbJztcbmNvbnN0IEFHRU5UX1NUQVJURURfUkVHRVggPSAvU2VydmVyVVJMSGVyZS0+KC4qKTwtU2VydmVyVVJMSGVyZS87XG5jb25zdCBMT0dfU1RBUlRUSU1FX1JFR0VYID0gL0J1aWx0IGF0IChcXHd7M30gW1xcZFxcc11cXGQgXFxkezR9IFxcZHsyfTpcXGR7Mn06XFxkezJ9KS87XG5jb25zdCBSRUFMX0RFVklDRV9MT0dHRVJfUEFUSCA9ICdpZGV2aWNlc3lzbG9nJztcblxuY2xhc3MgV2ViRHJpdmVyQWdlbnQge1xuXG4gIC8vIGFnZW50UGF0aCAob3B0aW9uYWwpOiBQYXRoIHRvIFdlYmRyaXZlckFnZW50IEV4ZWN1dGFibGUgKGluc2lkZSBXZWJEcml2ZXJBZ2VudC5hcHApXG4gIGNvbnN0cnVjdG9yIChhcmdzID0ge30pIHtcbiAgICBpZiAoYXJncy5hZ2VudFBhdGgpIHtcbiAgICAgIGxvZy5pbmZvKGBDdXN0b20gYWdlbnQgcGF0aCBzcGVjaWZpZWQ6ICR7YXJncy5hZ2VudFBhdGh9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5pbmZvKGBVc2luZyBkZWZhdWx0IGFnZW50OiAke0FHRU5UX1BBVEh9YCk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MuYm9vdHN0cmFwUGF0aCkge1xuICAgICAgbG9nLmluZm8oYEN1c3RvbSBib290c3RyYXAgcGF0aCBzcGVjaWZpZWQ6ICR7YXJncy5ib290c3RyYXBQYXRofWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuaW5mbyhgVXNpbmcgZGVmYXVsdCBib290c3RyYXA6ICR7Qk9PVFNUUkFQX1BBVEh9YCk7XG4gICAgfVxuXG4gICAgdGhpcy5kZXZpY2UgPSBhcmdzLmRldmljZTtcbiAgICB0aGlzLnBsYXRmb3JtVmVyc2lvbiA9IGFyZ3MucGxhdGZvcm1WZXJzaW9uO1xuICAgIHRoaXMuaG9zdCA9IGFyZ3MuaG9zdDtcbiAgICB0aGlzLnJlYWxEZXZpY2UgPSAhIWFyZ3MucmVhbERldmljZTtcblxuICAgIHRoaXMuYWdlbnRQYXRoID0gYXJncy5hZ2VudFBhdGggfHwgQUdFTlRfUEFUSDtcbiAgICB0aGlzLmJvb3RzdHJhcFBhdGggPSBhcmdzLmJvb3RzdHJhcFBhdGggfHwgQk9PVFNUUkFQX1BBVEg7XG4gICAgdGhpcy5yZWFsRGV2aWNlTG9nZ2VyID0gYXJncy5yZWFsRGV2aWNlTG9nZ2VyIHx8IFJFQUxfREVWSUNFX0xPR0dFUl9QQVRIO1xuICAgIHRoaXMud2RhTG9jYWxQb3J0ID0gYXJncy53ZGFMb2NhbFBvcnQ7XG4gICAgdGhpcy5pb3NMb2dBbHJlYWR5U2hvd24gPSBhcmdzLnNob3dJT1NMb2c7XG4gICAgdGhpcy5zaG93WGNvZGVMb2cgPSAhIWFyZ3Muc2hvd1hjb2RlTG9nO1xuICAgIHRoaXMueGNvZGVDb25maWdGaWxlID0gYXJncy54Y29kZUNvbmZpZ0ZpbGU7XG4gICAgdGhpcy5rZXljaGFpblBhdGggPSBhcmdzLmtleWNoYWluUGF0aDtcbiAgICB0aGlzLmtleWNoYWluUGFzc3dvcmQgPSBhcmdzLmtleWNoYWluUGFzc3dvcmQ7XG4gIH1cblxuICBhc3luYyBsYXVuY2ggKHNlc3Npb25JZCkge1xuICAgIGxvZy5pbmZvKCdMYXVuY2hpbmcgV2ViRHJpdmVyQWdlbnQgb24gdGhlIGRldmljZScpO1xuXG4gICAgaWYgKCFhd2FpdCBmcy5leGlzdHModGhpcy5hZ2VudFBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyeWluZyB0byB1c2UgV2ViRHJpdmVyQWdlbnQgcHJvamVjdCBhdCAnJHt0aGlzLmFnZW50UGF0aH0nIGJ1dCB0aGUgYCArXG4gICAgICAgICAgICAgICAgICAgICAgJ2ZpbGUgZG9lcyBub3QgZXhpc3QnKTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgV0RBIGxpYnJhcnkgaGFzIGJlZW4gYnVpbHRcbiAgICBhd2FpdCB0aGlzLmNoZWNrRm9yRGVwZW5kZW5jaWVzKCk7XG5cbiAgICAvL2tpbGwgYWxsIGhhbmdpbmcgcHJvY2Vzc2VzXG4gICAgYXdhaXQgdGhpcy5raWxsSGFuZ2luZ1Byb2Nlc3NlcygpO1xuXG4gICAgLy8gc3RhcnQgdGhlIGxvZ2dpbmcgcHJvY2Vzc1xuICAgIGlmICh0aGlzLnJlYWxEZXZpY2UpIHtcbiAgICAgIHRoaXMuZGV2aWNlTG9ncyA9IGF3YWl0IHRoaXMuY3JlYXRlUmVhbERldmljZUxvZ3NTdWJQcm9jZXNzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGV2aWNlTG9ncyA9IGF3YWl0IHRoaXMuY3JlYXRlU2ltTG9nc1N1YlByb2Nlc3MoKTtcbiAgICB9XG5cbiAgICB0aGlzLnhjb2RlYnVpbGQgPSBhd2FpdCB0aGlzLmNyZWF0ZVhjb2RlQnVpbGRTdWJQcm9jZXNzKCk7XG5cbiAgICAvLyBzdGFydCB0aGUgeGNvZGVidWlsZCBwcm9jZXNzXG4gICAgbGV0IGFnZW50VXJsID0gYXdhaXQgdGhpcy5zdGFydFhjb2RlYnVpbGQoKTtcblxuICAgIHRoaXMudXJsID0gdXJsLnBhcnNlKGFnZW50VXJsKTtcblxuICAgIHRoaXMudXJsLmhvc3RuYW1lID0gJ2xvY2FsaG9zdCc7XG4gICAgaWYgKHRoaXMucmVhbERldmljZSkge1xuICAgICAgbGV0IGxvY2FscG9ydCA9IHRoaXMud2RhTG9jYWxQb3J0IHx8IHRoaXMudXJsLnBvcnQ7XG4gICAgICB0aGlzLmlwcm94eSA9IHRoaXMuY3JlYXRlaVByb3h5U3ViUHJvY2Vzcyhsb2NhbHBvcnQsIHRoaXMudXJsLnBvcnQpO1xuICAgICAgYXdhaXQgdGhpcy5zdGFydGlwcm94eSgpO1xuICAgICAgdGhpcy51cmwucG9ydCA9IGxvY2FscG9ydDtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwUHJveHkoc2Vzc2lvbklkKTtcblxuICAgIHJldHVybiBhZ2VudFVybDtcbiAgfVxuXG4gIHNldHVwUHJveHkgKHNlc3Npb25JZCkge1xuICAgIHRoaXMuandwcm94eSA9IG5ldyBKV1Byb3h5KHtzZXJ2ZXI6IHRoaXMudXJsLmhvc3RuYW1lLCBwb3J0OiB0aGlzLnVybC5wb3J0LCBiYXNlOiAnJ30pO1xuICAgIHRoaXMuandwcm94eS5zZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gICAgdGhpcy5wcm94eVJlcVJlcyA9IHRoaXMuandwcm94eS5wcm94eVJlcVJlcy5iaW5kKHRoaXMuandwcm94eSk7XG4gIH1cblxuICBhc3luYyBjaGVja0ZvckRlcGVuZGVuY2llcyAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBjYXJ0aGFnZVBhdGggPSBhd2FpdCBmcy53aGljaCgnY2FydGhhZ2UnKTtcbiAgICAgIGxvZy5kZWJ1ZyhgQ2FydGhhZ2UgZm91bmQ6ICR7Y2FydGhhZ2VQYXRofWApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmluZm8oJ0NhcnRoYWdlIG5vdCBmb3VuZC4gSW5zdGFsbCB1c2luZyBgYnJldyBpbnN0YWxsIGNhcnRoYWdlYCcpO1xuICAgIH1cbiAgICBpZiAoIWF3YWl0IGZzLmhhc0FjY2VzcyhgJHt0aGlzLmJvb3RzdHJhcFBhdGh9L0NhcnRoYWdlYCkpIHtcbiAgICAgIGxvZy5kZWJ1ZygnUnVubmluZyBXZWJEcml2ZXJBZ2VudCBib290c3RyYXAgc2NyaXB0IHRvIGluc3RhbGwgZGVwZW5kZW5jaWVzJyk7XG4gICAgICBhd2FpdCBleGVjKCcvYmluL2Jhc2gnLCBbJ1NjcmlwdHMvYm9vdHN0cmFwLnNoJywgJy1kJ10sIHtjd2Q6IHRoaXMuYm9vdHN0cmFwUGF0aH0pO1xuICAgIH1cbiAgICBpZiAoIWF3YWl0IGZzLmhhc0FjY2VzcyhgJHt0aGlzLmJvb3RzdHJhcFBhdGh9L1Jlc291cmNlc2ApKSB7XG4gICAgICBsb2cuZGVidWcoJ0NyZWF0aW5nIFdlYkRyaXZlckFnZW50IHJlc291cmNlcyBkaXJlY3RvcnknKTtcbiAgICAgIGF3YWl0IGZzLm1rZGlyKGAke3RoaXMuYm9vdHN0cmFwUGF0aH0vUmVzb3VyY2VzYCk7XG4gICAgfVxuICAgIGlmICghYXdhaXQgZnMuaGFzQWNjZXNzKGAke3RoaXMuYm9vdHN0cmFwUGF0aH0vUmVzb3VyY2VzL1dlYkRyaXZlckFnZW50LmJ1bmRsZWApKSB7XG4gICAgICBsb2cuZGVidWcoJ0NyZWF0aW5nIFdlYkRyaXZlckFnZW50IHJlc291cmNlIGJ1bmRsZSBkaXJlY3RvcnknKTtcbiAgICAgIGF3YWl0IGZzLm1rZGlyKGAke3RoaXMuYm9vdHN0cmFwUGF0aH0vUmVzb3VyY2VzL1dlYkRyaXZlckFnZW50LmJ1bmRsZWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVhjb2RlQnVpbGRTdWJQcm9jZXNzICgpIHtcbiAgICBsZXQgY21kID0gJ3hjb2RlYnVpbGQnO1xuICAgIGxldCBhcmdzID0gW1xuICAgICAgJ2J1aWxkJyxcbiAgICAgICd0ZXN0JyxcbiAgICAgICctcHJvamVjdCcsIHRoaXMuYWdlbnRQYXRoLFxuICAgICAgJy1zY2hlbWUnLCAnV2ViRHJpdmVyQWdlbnRSdW5uZXInLFxuICAgICAgJy1kZXN0aW5hdGlvbicsIGBpZD0ke3RoaXMuZGV2aWNlLnVkaWR9YCxcbiAgICAgICctY29uZmlndXJhdGlvbicsICdEZWJ1ZycsXG4gICAgXTtcblxuICAgIGlmICh0aGlzLnJlYWxEZXZpY2UpIHtcbiAgICAgIGNtZCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICdiaW4nLCAncnVuLXhjb2RlYnVpbGQuc2gnKTtcbiAgICAgIGFyZ3MgPSBbXG4gICAgICAgICctLXByb2plY3QnLCB0aGlzLmFnZW50UGF0aCxcbiAgICAgICAgJy0tc2NoZW1lJywgJ1dlYkRyaXZlckFnZW50UnVubmVyJyxcbiAgICAgICAgJy0tZGVzdGluYXRpb24nLCBgaWQ9JHt0aGlzLmRldmljZS51ZGlkfWAsXG4gICAgICBdO1xuICAgICAgaWYgKHRoaXMueGNvZGVDb25maWdGaWxlKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgVXNpbmcgWGNvZGUgY29uZmlndXJhdGlvbiBmaWxlOiAnJHt0aGlzLnhjb2RlQ29uZmlnRmlsZX0nYCk7XG4gICAgICAgIGFyZ3MucHVzaCgnLS14Y29kZS1jb25maWctZmlsZScsIGBcIiR7dGhpcy54Y29kZUNvbmZpZ0ZpbGV9XCJgKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmtleWNoYWluUGF0aCAmJiB0aGlzLmtleWNoYWluUGFzc3dvcmQpIHtcbiAgICAgICAgYXJncy5wdXNoKCctLWtleWNoYWluLXBhdGgnLCB0aGlzLmtleWNoYWluUGF0aCk7XG4gICAgICAgIGFyZ3MucHVzaCgnLS1rZXljaGFpbi1wYXNzd29yZCcsIHRoaXMua2V5Y2hhaW5QYXNzd29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9nLmRlYnVnKGBCZWdpbm5pbmcgdGVzdCB3aXRoIGNvbW1hbmQgJyR7Y21kfSAke2FyZ3Muam9pbignICcpfScgYCArXG4gICAgICAgICAgICAgIGBpbiBkaXJlY3RvcnkgJyR7dGhpcy5ib290c3RyYXBQYXRofSdgKTtcbiAgICBsZXQgeGNvZGVidWlsZCA9IG5ldyBTdWJQcm9jZXNzKGNtZCwgYXJncywge2N3ZDogdGhpcy5ib290c3RyYXBQYXRofSk7XG5cbiAgICBsZXQgbG9nWGNvZGVPdXRwdXQgPSB0aGlzLnNob3dYY29kZUxvZztcbiAgICB4Y29kZWJ1aWxkLm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgIGxldCBvdXQgPSBzdGRvdXQgfHwgc3RkZXJyO1xuICAgICAgLy8gd2Ugd2FudCB0byBwdWxsIG91dCB0aGUgbG9nIGZpbGUgdGhhdCBpcyBjcmVhdGVkLCBhbmQgaGlnaGxpZ2h0IGl0XG4gICAgICAvLyBmb3IgZGlhZ25vc3RpYyBwdXJwb3Nlc1xuICAgICAgaWYgKG91dC5pbmRleE9mKCdXcml0aW5nIGRpYWdub3N0aWMgbG9nIGZvciB0ZXN0IHNlc3Npb24gdG8nKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gcHVsbCBvdXQgdGhlIGZpcnN0IGxpbmUgdGhhdCBiZWdpbnMgd2l0aCB0aGUgcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgLy8gd2hpY2ggKnNob3VsZCogYmUgdGhlIGxpbmUgaW5kaWNhdGluZyB0aGUgbG9nIGZpbGUgZ2VuZXJhdGVkXG4gICAgICAgIGxldCBsb2dMb2NhdGlvbiA9IF8uZmlyc3QoXy5yZW1vdmUob3V0LnRyaW0oKS5zcGxpdCgnXFxuJyksICh2KSA9PiB2LmluZGV4T2YocGF0aC5zZXApID09PSAwKSk7XG4gICAgICAgIGxvZy5kZWJ1ZyhgTG9nIGZpbGUgZm9yIHhjb2RlYnVpbGQgdGVzdDogJHtsb2dMb2NhdGlvbn1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgd2UgaGF2ZSBhbiBlcnJvciB3ZSB3YW50IHRvIG91dHB1dCB0aGUgbG9nc1xuICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBmYWlsdXJlIGlzIGluc2NydXRpYmxlXG4gICAgICBpZiAob3V0LmluZGV4T2YoJ0Vycm9yIERvbWFpbj0nKSAhPT0gLTEpIHtcbiAgICAgICAgbG9nWGNvZGVPdXRwdXQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9nWGNvZGVPdXRwdXQpIHtcbiAgICAgICAgeGNvZGVMb2cuaW5mbyhvdXQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhjb2RlYnVpbGQ7XG4gIH1cblxuICBhc3luYyBjcmVhdGVTaW1Mb2dzU3ViUHJvY2VzcyAoKSB7XG4gICAgbGV0IGFyZ3MgPSBbXG4gICAgICAnLWYnLFxuICAgICAgJy1uJywgJzAnLFxuICAgICAgcGF0aC5yZXNvbHZlKHRoaXMuZGV2aWNlLmdldExvZ0RpcigpLCAnc3lzdGVtLmxvZycpXG4gICAgXTtcblxuICAgIGxldCBsb2dzID0gbmV3IFN1YlByb2Nlc3MoJ3RhaWwnLCBhcmdzKTtcbiAgICB0aGlzLnNldHVwTG9nZ2luZyhsb2dzLCAnU2ltJyk7XG4gICAgcmV0dXJuIGxvZ3M7XG4gIH1cblxuICBjcmVhdGVpUHJveHlTdWJQcm9jZXNzIChsb2NhbHBvcnQsIGRldmljZXBvcnQpIHtcbiAgICBsb2cuZGVidWcoYFN0YXJ0aW5nIGlwcm94eSB0byBmb3J3YXJkIHRyYWZmaWMgZnJvbSBsb2NhbCBwb3J0ICR7bG9jYWxwb3J0fSB0byBkZXZpY2UgcG9ydCAke2RldmljZXBvcnR9IG92ZXIgVVNCYCk7XG4gICAgcmV0dXJuIG5ldyBTdWJQcm9jZXNzKGBpcHJveHlgLCBbbG9jYWxwb3J0LCBkZXZpY2Vwb3J0LCB0aGlzLmRldmljZS51ZGlkXSk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVSZWFsRGV2aWNlTG9nc1N1YlByb2Nlc3MgKCkge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGNoZWNrRm9yTG9nZ2VyIChsb2dnZXIpIHtcbiAgICAgIC8vIHRoZSBsb2dnZXIgY2FuIGJlIHRoZSBuYW1lIG9mIGEgcHJvZ3JhbSBvbiB0aGUgUEFUSFxuICAgICAgLy8gb3IgYSBwYXRoIHRvIHRoZSBwcm9ncmFtXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBmcy53aGljaChsb2dnZXIpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIG5vdCBvbiB0aGUgUEFUSCwgc28gc2VlIGlmIGl0IGlzIGFuIGFjY2Vzc2libGUgcGF0aCBpdHNlbGZcbiAgICAgICAgcmV0dXJuIGF3YWl0IGZzLmV4aXN0cyhsb2dnZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBubyBlcnJvciB0aHJvd24sIHNvIGFsbCBpcyB3ZWxsXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZWFsRGV2aWNlTG9nZ2VyLmluZGV4T2YoJ2RldmljZWNvbnNvbGUnKSAhPT0gLTEgJiYgYXdhaXQgZnMuZXhpc3RzKHRoaXMucmVhbERldmljZUxvZ2dlcikpIHtcbiAgICAgIC8vIHRoZSB1c2VyIG1pZ2h0IGhhdmUgcGFzc2VkIGluIHRoZSBkaXJlY3RvcnkgZm9yIGBkZXZpY2Vjb25zb2xlYCwgaW4gd2hpY2ggY2FzZSB3ZSB3YW50IHRvXG4gICAgICAvLyBtYWtlIHN1cmUgd2UgdXNlIHRoZSBleGVjdXRhYmxlXG4gICAgICBsZXQgc3RhdCA9IGF3YWl0IGZzLnN0YXQodGhpcy5yZWFsRGV2aWNlTG9nZ2VyKTtcbiAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgbG9nLndhcm4oYFJlYWwgZGV2aWNlIGxvZ2dlciAnJHt0aGlzLnJlYWxEZXZpY2VMb2dnZXJ9JyBpcyBhIGRpcmVjdG9yeS4gQXBwZW5kaW5nICdkZXZpY2Vjb25zb2xlJyBleGVjdXRhYmxlYCk7XG4gICAgICAgIHRoaXMucmVhbERldmljZUxvZ2dlciA9IHBhdGgucmVzb2x2ZSh0aGlzLnJlYWxEZXZpY2VMb2dnZXIsICdkZXZpY2Vjb25zb2xlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFhd2FpdCBjaGVja0ZvckxvZ2dlcih0aGlzLnJlYWxEZXZpY2VMb2dnZXIpKSB7XG4gICAgICAvLyB3ZSBoYXZlIG5vIGxvZ2dlclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCByZWFsIGRldmljZSBsb2dnaW5nIHByb2dyYW0gJyR7dGhpcy5yZWFsRGV2aWNlTG9nZ2VyfSdgKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBVc2luZyByZWFsIGRldmljZSBsb2dnZXIgJyR7dGhpcy5yZWFsRGV2aWNlTG9nZ2VyfSdgKTtcblxuICAgIGxldCBsb2dzID0gbmV3IFN1YlByb2Nlc3ModGhpcy5yZWFsRGV2aWNlTG9nZ2VyLCBbJy11JywgdGhpcy5kZXZpY2UudWRpZF0pO1xuICAgIHRoaXMuc2V0dXBMb2dnaW5nKGxvZ3MsICdEZXZpY2UnKTtcbiAgICByZXR1cm4gbG9ncztcbiAgfVxuXG4gIHNldHVwTG9nZ2luZyAobG9ncywgcHJlZml4KSB7XG4gICAgbGV0IGxvZ2dpbmdTdGFydGVkID0gIXRoaXMucmVhbERldmljZTtcbiAgICBsZXQgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbiAgICBmdW5jdGlvbiBzaG91bGRTdGFydExvZ2dpbmcgKHJvdykge1xuICAgICAgbGV0IGxvZ1Jvd1BhcnRzID0gcm93LnNwbGl0KC9cXHMrLyk7XG4gICAgICBsZXQgbG9nUm93RGF0ZSA9IG5ldyBEYXRlKGAke3N0YXJ0VGltZS5nZXRGdWxsWWVhcigpfSAke2xvZ1Jvd1BhcnRzWzBdfSAke2xvZ1Jvd1BhcnRzWzFdfSAke2xvZ1Jvd1BhcnRzWzJdfWApO1xuICAgICAgbG9nZ2luZ1N0YXJ0ZWQgPSBsb2dSb3dEYXRlLmlzQWZ0ZXIoc3RhcnRUaW1lKTtcbiAgICAgIHJldHVybiBsb2dnaW5nU3RhcnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1BlcnRpbmVudExvZ0xpbmUgKGxpbmUpIHtcbiAgICAgIHJldHVybiBsaW5lLmxlbmd0aCAmJlxuICAgICAgICAgICAgKGxpbmUuaW5kZXhPZihBR0VOVF9MT0dfUFJFRklYKSAhPT0gLTEgfHxcbiAgICAgICAgICAgICBsaW5lLmluZGV4T2YoQUdFTlRfUlVOTkVSX0xPR19QUkVGSVgpICE9PSAtMSB8fFxuICAgICAgICAgICAgIGxpbmUuaW5kZXhPZihTSU1fQlJJREdFX0xPR19QUkVGSVgpICE9PSAtMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVhbERldmljZSAmJiB0aGlzLnJlYWxEZXZpY2VMb2dnZXIuaW5kZXhPZignaWRldmljZXN5c2xvZycpICE9PSAtMSkge1xuICAgICAgLy8gd2UgYXJlIHVzaW5nIGlkZXZpY2VzeXNsb2csIHdoaWNoIHNvbWV0aW1lcyBjYW5ub3QgY29ubmVjdCB0byB0aGUgZGV2aWNlXG4gICAgICAvLyBhdCB3aGljaCB0aW1lIHRoZSBzeXN0ZW0gd2lsbCBub3QgYmUgYWJsZSB0byBmaWd1cmUgb3V0IHRoYXQgdGhlIHByb2Nlc3NcbiAgICAgIC8vIGhhcyBzdGFydGVkXG4gICAgICBsb2dzLm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgICAgbGV0IGVycm9yU3RyaW5nID0gJ0NvdWxkIG5vdCBzdGFydCBsb2dnZXIgZm9yIHVkaWQnO1xuICAgICAgICBpZiAoc3Rkb3V0LmluZGV4T2YoZXJyb3JTdHJpbmcpICE9PSAtMSB8fCBzdGRlcnIuaW5kZXhPZihlcnJvclN0cmluZykgIT09IC0xKSB7XG4gICAgICAgICAgLy8gdW5mb3J0dW5hdGVseSB3ZSBoYXZlIG5vIHdheSB0byBzdG9wcGluZyB0aGUgcHJvY2Vzcywgc28ganVzdCBsb2cgb3ZlcnRseVxuICAgICAgICAgIGxldCBtc2cgPSBgVGhlIHJlYWwgZGV2aWNlIGxvZ2dlciAnJHt0aGlzLnJlYWxEZXZpY2VMb2dnZXJ9JyB3YXMgYCArXG4gICAgICAgICAgICAgICAgICAgIGB1bmFibGUgdG8gc3RhcnQgbG9nIGNhcHR1cmUuIFBsZWFzZSB0cnkgaW5zdGFsbGluZyBgICtcbiAgICAgICAgICAgICAgICAgICAgYCdkZXZpY2Vjb25zb2xlJyAoJ25wbSBpbnN0YWxsIC1nIGRldmljZWNvbnNvbGUnKSBhbmQgYCArXG4gICAgICAgICAgICAgICAgICAgIGBzcGVjaWZ5IHRoZSBwYXRoIHRvIGl0IHVzaW5nIHRoZSAncmVhbERldmljZUxvZ2dlcicgY2FwYWJpbGl0eS5gO1xuICAgICAgICAgIGxvZy5lcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaW9zTG9nQWxyZWFkeVNob3duKSB7XG4gICAgICBsb2dzLm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgICAgbGV0IG91dCA9IHN0ZG91dCB8fCBzdGRlcnI7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBhcmUgbm90IHJlYWRpbmcgbG9ncyBmcm9tIGJlZm9yZSB0aGlzIHRlc3QgcnVuXG4gICAgICAgIGlmICghbG9nZ2luZ1N0YXJ0ZWQgJiYgIXNob3VsZFN0YXJ0TG9nZ2luZyhvdXQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BlcnRpbmVudExvZ0xpbmUob3V0KSkge1xuICAgICAgICAgIGZvciAobGV0IGxpbmUgb2Ygb3V0LnNwbGl0KFwiXFxuXCIpLmZpbHRlcihCb29sZWFuKSkge1xuICAgICAgICAgICAgYWdlbnRMb2cuZGVidWcoYCR7cHJlZml4fTogJHtsaW5lfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RhcnRYY29kZWJ1aWxkICgpIHtcbiAgICAvLyB3cmFwIHRoZSBzdGFydCBwcm9jZWR1cmUgaW4gYSBwcm9taXNlIHNvIHRoYXQgd2UgY2FuIGNhdGNoLCBhbmQgcmVwb3J0LFxuICAgIC8vIGFueSBzdGFydHVwIGVycm9ycyB0aGF0IGFyZSB0aHJvd24gYXMgZXZlbnRzXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBCKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMueGNvZGVidWlsZC5vbignZXhpdCcsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgICAgbG9nLmluZm8oYHhjb2RlYnVpbGQgZXhpdGVkIHdpdGggY29kZSAnJHtjb2RlfScgYW5kIHNpZ25hbCAnJHtzaWduYWx9J2ApO1xuICAgICAgICBpZiAoIXNpZ25hbCAmJiBjb2RlICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYHhjb2RlYnVpbGQgZmFpbGVkIHdpdGggY29kZSAke2NvZGV9YCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5kZXZpY2VMb2dzLm9uKCdleGl0JywgKGNvZGUpID0+IHtcbiAgICAgICAgbGV0IG1zZyA9IGAke3RoaXMucmVhbERldmljZSA/ICdTeXN0ZW0nIDogJ1NpbXVsYXRvcid9IGxvZyBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9J2A7XG4gICAgICAgIGxvZy5pbmZvKG1zZyk7XG4gICAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChtc2cpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGF3YWl0IHRoaXMueGNvZGVidWlsZC5zdGFydCgpO1xuICAgICAgICBsZXQgYWdlbnRVcmwgPSBhd2FpdCB0aGlzLndhaXRGb3JTdGFydChzdGFydFRpbWUpO1xuICAgICAgICByZXNvbHZlKGFnZW50VXJsKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsZXQgbXNnID0gYFVuYWJsZSB0byBzdGFydCBXZWJEcml2ZXJBZ2VudDogJHtlcnJ9YDtcbiAgICAgICAgbG9nLmVycm9yKG1zZyk7XG4gICAgICAgIHJldHVybiByZWplY3QobXNnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHdhaXRGb3JTdGFydCAoc3RhcnRUaW1lKSB7XG4gICAgLy8gd2UgaGF2ZSB0byB3YWl0IGZvciB0aGUgc2ltIHRvIHN0YXJ0IGJlZm9yZSB3ZSBjYW4gdGFpbCB0aGUgbG9nIGZpbGVcbiAgICBpZiAoIXRoaXMucmVhbERldmljZSkge1xuICAgICAgYXdhaXQgc3lzdGVtTG9nRXhpc3RzKHRoaXMuZGV2aWNlKTtcbiAgICB9XG5cbiAgICBsZXQgYWdlbnRVcmw7XG4gICAgbGV0IGxpbmVDb3VudCA9IDA7XG4gICAgbGV0IHJlYWNoZWRFbmQgPSAhdGhpcy5yZWFsRGV2aWNlOyAvLyBzaW11bGF0b3IgZG9lcyBub3QgbmVlZCB0byB3YWl0LCBzaW5jZSB3ZSBhcmUgdGFpbGluZ1xuICAgIGxldCBzaG93V2FpdGluZ01lc3NhZ2UgPSB0cnVlOyAvLyB0dXJuIG9mZiBsb2dnaW5nIG9uY2Ugd2UgaGF2ZSBoaXQgdGhlIGVuZFxuXG4gICAgbGV0IHN0YXJ0RGV0ZWN0b3IgPSAoc3Rkb3V0KSA9PiB7XG4gICAgICAvLyBvbiBhIHJlYWwgZGV2aWNlIHRoZXJlIG1heSBhbHJlYWR5IGJlIHN5c3RlbSBsb2dzIHRoYXQgbmVlZCB0byBiZVxuICAgICAgLy8gcGFzc2VkIGJlZm9yZSB3ZSBnZXQgdG8gdGhlIHJlYWwgc3RhcnR1cCBsb2dzLCBvdGhlcndpc2VcbiAgICAgIC8vIHdlIGV4cGVjdCB0d28gbGluZXMsIG9uZSBhZnRlciBhbm90aGVyXG4gICAgICAvLyAgICAgSnVsIDIwIDEzOjAzOjU3IGlhbVBob25lIFhDVFJ1bm5lclsyOTZdIDxXYXJuaW5nPjogQnVpbHQgYXQgSnVsIDIwIDIwMTYgMTM6MDM6NTBcbiAgICAgIC8vICAgICBKdWwgMjAgMTM6MDM6NTcgaWFtUGhvbmUgWENUUnVubmVyWzI5Nl0gPFdhcm5pbmc+OiBTZXJ2ZXJVUkxIZXJlLT5odHRwOi8vMTAuMzUuNC4xMjI6ODEwMDwtU2VydmVyVVJMSGVyZVxuICAgICAgaWYgKCFyZWFjaGVkRW5kKSB7XG4gICAgICAgIGxldCBkYXRlTWF0Y2ggPSBMT0dfU1RBUlRUSU1FX1JFR0VYLmV4ZWMoc3Rkb3V0KTtcbiAgICAgICAgaWYgKGRhdGVNYXRjaCkge1xuICAgICAgICAgIGxldCBidWlsZFRpbWUgPSBuZXcgRGF0ZShkYXRlTWF0Y2hbMV0pO1xuICAgICAgICAgIGlmIChidWlsZFRpbWUuaXNBZnRlcihzdGFydFRpbWUpKSB7XG4gICAgICAgICAgICByZWFjaGVkRW5kID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHJlYWNoZWRFbmQpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gQUdFTlRfU1RBUlRFRF9SRUdFWC5leGVjKHN0ZG91dCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGFnZW50VXJsID0gbWF0Y2hbMV07XG4gICAgICAgICAgbG9nLmluZm8oYERldGVjdGVkIHRoYXQgV2ViRHJpdmVyQWdlbnQgaXMgcnVubmluZyBhdCB1cmwgJyR7YWdlbnRVcmx9J2ApO1xuICAgICAgICAgIGlmICghYWdlbnRVcmwpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvckFuZFRocm93KG5ldyBFcnJvcignTm8gdXJsIGRldGVjdGVkIGZyb20gV2ViRHJpdmVyQWdlbnQnKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNob3dXYWl0aW5nTWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHBlcmlvZGljYWxseSBsb2csIHNvIGl0IGRvZXMgbm90IGxvb2sgbGlrZSBldmVyeXRoaW5nIGRpZWRcbiAgICAgIGxpbmVDb3VudCsrO1xuICAgICAgbGV0IHRocmVzaG9sZCA9IHRoaXMucmVhbERldmljZSA/IDUwMDAgOiAyMDA7XG4gICAgICBpZiAoc2hvd1dhaXRpbmdNZXNzYWdlICYmIGxpbmVDb3VudCAlIHRocmVzaG9sZCA9PT0gMCkge1xuICAgICAgICBsb2cuZGVidWcoJ1dhaXRpbmcgZm9yIFdlYkRyaXZlckFnZW50IHNlcnZlciB0byBmaW5pc2ggbG9hZGluZy4uLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIGxvZy5pbmZvKCdXYWl0aW5nIGZvciBXZWJEcml2ZXJBZ2VudCB0byBzdGFydCBvbiBkZXZpY2UnKTtcbiAgICBhd2FpdCB0aGlzLmRldmljZUxvZ3Muc3RhcnQoc3RhcnREZXRlY3Rvcik7XG4gICAgbG9nLmluZm8oYFdlYkRyaXZlckFnZW50IHN0YXJ0ZWQgYXQgdXJsICcke2FnZW50VXJsfSdgKTtcblxuICAgIHJldHVybiBhZ2VudFVybDtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0aXByb3h5ICgpIHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5pcHJveHkub24oJ2V4aXQnLCAoY29kZSkgPT4ge1xuICAgICAgICBsb2cud2FybihgaXByb3h5IGV4aXRlZCAke2NvZGUgPyAnd2l0aCBjb2RlICR7Y29kZX0nIDogJyd9YCk7XG4gICAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYGlwcm94eSBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9J2ApKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmlwcm94eS5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICAgIGxldCBvdXQgPSBzdGRvdXQgfHwgc3RkZXJyO1xuICAgICAgICBmb3IgKGxldCBsaW5lIG9mIG91dC5zcGxpdCgnXFxuJykpIHtcbiAgICAgICAgICBpZiAoIWxpbmUubGVuZ3RoKSBjb250aW51ZTtcbiAgICAgICAgICBpcHJveHlMb2cuZGVidWcobGluZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLmlwcm94eS5zdGFydCg1MDAwKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy5lcnJvcihgRXJyb3Igc3RhcnRpbmcgaXByb3h5OiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgICAgIHJlamVjdCgnVW5hYmxlIHRvIHN0YXJ0IGlwcm94eS4gSXMgaXQgaW5zdGFsbGVkPycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMga2lsbEhhbmdpbmdQcm9jZXNzZXMgKCkge1xuICAgIGxvZy5kZWJ1ZygnS2lsbGluZyBoYW5naW5nIHByb2Nlc3NlcycpO1xuICAgIGF3YWl0IGtpbGxBcHBVc2luZ0FwcE5hbWUodGhpcy5kZXZpY2UudWRpZCwgYHhjb2RlYnVpbGRgKTtcbiAgICBsZXQgcHJvY05hbWVzID0gdGhpcy5yZWFsRGV2aWNlID8gW3RoaXMucmVhbERldmljZUxvZ2dlciwgJ2lwcm94eSddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFsndGFpbCcsICdYQ1RSdW5uZXInXTtcbiAgICBmb3IgKGxldCBwcm9jIG9mIHByb2NOYW1lcykge1xuICAgICAgYXdhaXQga2lsbEFwcFVzaW5nQXBwTmFtZSh0aGlzLmRldmljZS51ZGlkLCBwcm9jKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBxdWl0ICgpIHtcbiAgICBsb2cuaW5mbygnU2h1dHRpbmcgZG93biBXZWJEcml2ZXJBZ2VudCcpO1xuICAgIGxldCBnZXRTdG9wUHJvbWlzZXMgPSAoc2lnbmFsKSA9PiB7XG4gICAgICBsZXQgc3RvcHMgPSBbXTtcbiAgICAgIGlmICh0aGlzLnhjb2RlYnVpbGQgJiYgdGhpcy54Y29kZWJ1aWxkLnByb2MpIHtcbiAgICAgICAgc3RvcHMucHVzaCh0aGlzLnhjb2RlYnVpbGQuc3RvcChzaWduYWwpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRldmljZUxvZ3MgJiYgdGhpcy5kZXZpY2VMb2dzLnByb2MpIHtcbiAgICAgICAgc3RvcHMucHVzaCh0aGlzLmRldmljZUxvZ3Muc3RvcChzaWduYWwpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlwcm94eSAmJiB0aGlzLmlwcm94eS5wcm9jKSB7XG4gICAgICAgIHN0b3BzLnB1c2godGhpcy5pcHJveHkuc3RvcChzaWduYWwpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdG9wcztcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuandwcm94eSkge1xuICAgICAgdGhpcy5qd3Byb3h5LnNlc3Npb25JZCA9IG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IEIuYWxsKGdldFN0b3BQcm9taXNlcygpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKCdQcm9jZXNzIGRpZG5cXCd0IGVuZCBhZnRlcicpID09PSAtMSkge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgICBsb2cuZGVidWcoJ1dlYkRyaXZlckFnZW50IHByb2Nlc3MgZGlkIG5vdCBlbmQgaW4gYSB0aW1lbHkgZmFzaGlvbi4gJyArXG4gICAgICAgICAgICAgICAgJ1NlbmRpbmcgU0lHSFVQIHNpZ25hbC4uLicpO1xuICAgICAgYXdhaXQgQi5hbGwoZ2V0U3RvcFByb21pc2VzKCdTSUdIVVAnKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkRyaXZlckFnZW50O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
