'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _appiumIosDriver = require('appium-ios-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var helpers = {},
    extensions = {},
    commands = {};

commands.moveTo = _appiumIosDriver.iosCommands.gesture.moveTo;

commands.click = function callee$0$0(el) {
  var atomsElement;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');

      case 2:
        el = _appiumSupport.util.unwrapElement(el);

        if (!(this.opts.nativeWebTap && !this.isRealDevice())) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.nativeWebTap(el));

      case 6:
        context$1$0.next = 12;
        break;

      case 8:
        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.executeAtom('click', [atomsElement]));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.performTouch = function callee$0$0(gestures) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!isTap(gestures)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.handleTap(gestures[0]));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        if (!(gestures.length === 1 && (gestures[0] || '').action.toLowerCase() === 'doubletap')) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.handleDoubleTap(gestures[0]));

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 12:
        if (!isLongPress(gestures)) {
          context$1$0.next = 18;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.handleLongPress(gestures));

      case 15:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 18:
        if (!isDrag(gestures)) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.handleDrag(gestures));

      case 21:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 24:
        if (!isScroll(gestures)) {
          context$1$0.next = 28;
          break;
        }

        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(this.handleScroll(gestures));

      case 27:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 28:
        throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for gestures other than Tap is not yet implemented. Please contact an Appium dev');

      case 29:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.performMultiAction = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for multi-action API is not yet implemented. Please contact an Appium dev.');

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.nativeClick = function callee$0$0(el) {
  var endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);
        endpoint = '/element/' + el + '/click';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', {}));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function isDrag(gestures) {
  return gestures.length === 4 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'moveTo' && gestures[3].action === 'release';
}

function isTap(gestures) {
  if (gestures.length === 1 && gestures[0].action === 'tap') {
    return true;
  } else if (gestures.length === 2 && gestures[0].action === 'press' && gestures[1].action === 'release') {
    return true;
  }
  return false;
}

function isLongPress(gestures) {
  if (gestures.length === 1 && gestures[0].action.toLowerCase() === 'longpress') {
    return true;
  } else if (gestures.length === 3 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'release') {
    return true;
  }
  return false;
}

function isScroll(gestures) {
  if (gestures.length === 3 && gestures[0].action === 'press' && gestures[1].action === 'moveTo' && gestures[2].action === 'release') {
    return true;
  }
  return false;
}

helpers.handleScroll = function callee$0$0(gestures) {
  var dragGestures;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!gestures[1].options.element) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.mobileScroll({
          element: gestures[1].options.element,
          toVisible: true
        }));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        dragGestures = [gestures[0], { action: 'wait', options: { ms: 0 } }, gestures[1], gestures[2]];
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.handleDrag(dragGestures));

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleDrag = function callee$0$0(gestures) {
  var press, wait, moveTo, pressCoordinates, duration, moveToCoordinates, params, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        press = gestures[0];
        wait = gestures[1];
        moveTo = gestures[2];
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getCoordinates(press));

      case 5:
        pressCoordinates = context$1$0.sent;
        duration = parseInt(wait.options.ms, 10) / 1000;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getCoordinates(moveTo));

      case 9:
        moveToCoordinates = context$1$0.sent;

        // update moveTo coordinates with offset
        moveToCoordinates = this.applyMoveToOffset(pressCoordinates, moveToCoordinates);

        // build drag command
        params = {};

        params.fromX = pressCoordinates.x;
        params.fromY = pressCoordinates.y;
        params.toX = moveToCoordinates.x;
        params.toY = moveToCoordinates.y;
        params.duration = duration;

        endpoint = '/uiaTarget/0/dragfromtoforduration';
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 20:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleTap = function callee$0$0(gesture) {
  var options, params, el, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        options = gesture.options || {};
        params = {};

        if (_appiumSupport.util.hasValue(options.x) && _appiumSupport.util.hasValue(options.y)) {
          params.x = options.x;
          params.y = options.y;
        }

        el = _appiumSupport.util.hasValue(options.element) ? options.element : '';
        endpoint = '/tap/' + el;

        if (_appiumSupport.util.hasValue(this.opts.tapWithShortPressDuration)) {
          // in some cases `tap` is too slow, so allow configurable long press
          _logger2['default'].debug('Translating tap into long press with \'' + this.opts.tapWithShortPressDuration + '\' duration');
          params.duration = parseFloat(this.opts.tapWithShortPressDuration);
          endpoint = '/uiaElement/' + el + '/touchAndHold';
          params.duration = parseFloat(this.opts.tapWithShortPressDuration);
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleDoubleTap = function callee$0$0(gesture) {
  var opts, el, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        opts = gesture.options || {};

        if (opts.element) {
          context$1$0.next = 3;
          break;
        }

        throw new _appiumBaseDriver.errors.BadParametersError('WDA double tap needs an element');

      case 3:
        el = opts.element.ELEMENT ? opts.element.ELEMENT : opts.element;
        endpoint = '/uiaElement/' + el + '/doubleTap';
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST'));

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleLongPress = function callee$0$0(gestures) {
  var pressOpts, el, duration, params, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pressOpts = gestures[0].options || {};
        el = _appiumSupport.util.unwrapElement(pressOpts.element);

        if (el) {
          context$1$0.next = 4;
          break;
        }

        throw new _appiumBaseDriver.errors.BadParametersError('WDA long press needs an element');

      case 4:
        duration = 0.8;

        if (gestures.length === 1 && _appiumSupport.util.hasValue(pressOpts.duration)) {
          duration = pressOpts.duration;
        } else if (gestures.length === 3) {
          // duration is the `wait` action
          // upstream system expects seconds not milliseconds
          duration = parseFloat(gestures[1].options.ms) / 1000;
        }

        params = {
          duration: duration
        };
        endpoint = '/uiaElement/' + el + '/touchAndHold';
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileScroll = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var params, msg, element, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (opts.element) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.findElement('class name', 'XCUIElementTypeApplication'));

      case 3:
        opts.element = context$1$0.sent;

      case 4:
        params = {};

        if (!opts.name) {
          context$1$0.next = 9;
          break;
        }

        params.name = opts.name;
        context$1$0.next = 23;
        break;

      case 9:
        if (!opts.direction) {
          context$1$0.next = 13;
          break;
        }

        params.direction = opts.direction;
        context$1$0.next = 23;
        break;

      case 13:
        if (!opts.predicateString) {
          context$1$0.next = 17;
          break;
        }

        params.predicateString = opts.predicateString;
        context$1$0.next = 23;
        break;

      case 17:
        if (!opts.toVisible) {
          context$1$0.next = 21;
          break;
        }

        params.toVisible = opts.toVisible;
        context$1$0.next = 23;
        break;

      case 21:
        msg = 'Mobile scroll supports the following strategies: name, ' + 'direction, predicateString, and toVisible. Specify one of these';
        throw new _appiumBaseDriver.errors.BadParametersError(msg);

      case 23:
        element = opts.element.ELEMENT ? opts.element.ELEMENT : opts.element;
        endpoint = '/uiaElement/' + element + '/scroll';
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 27:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 28:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getCoordinates = function callee$0$0(gesture) {
  var el, coordinates, rect, pos, size, offsetX, offsetY;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = gesture.options.element;
        coordinates = { x: 0, y: 0, areOffsets: false };

        if (!el) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getRect(el));

      case 5:
        rect = context$1$0.sent;
        pos = { x: rect.x, y: rect.y };
        size = { w: rect.width, h: rect.height };
        offsetX = 0;
        offsetY = 0;

        // get the real offsets
        if (gesture.options.x || gesture.options.y) {
          offsetX = gesture.options.x || 0;
          offsetY = gesture.options.y || 0;
        } else {
          offsetX = size.w / 2;
          offsetY = size.h / 2;
        }

        // apply the offsets
        coordinates.x = pos.x + offsetX;
        coordinates.y = pos.y + offsetY;
        context$1$0.next = 18;
        break;

      case 15:
        // moveTo coordinates are passed in as offsets
        coordinates.areOffsets = gesture.action === 'moveTo';
        coordinates.x = gesture.options.x || 0;
        coordinates.y = gesture.options.y || 0;

      case 18:
        return context$1$0.abrupt('return', coordinates);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.applyMoveToOffset = function (firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

_Object$assign(extensions, helpers, commands);
exports.extensions = extensions;
exports.helpers = helpers;
exports.commands = commands;
exports['default'] = extensions;

// atoms-based clicks don't always work in safari 7
/*actions, elementId*/
// use the to-visible option of scrolling in WDA

// otherwise, for now, just translate into a drag with short duration

// get gestures

// get drag data

// WDA supports four scrolling strategies: predication based on name, direction,
// predicateString, and toVisible, in that order.

// defaults

// figure out the element coordinates.

// defaults
//# sourceMappingURL=data:application/json;charset=utf8;base64,
