'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var helpers = {},
    extensions = {};

helpers.proxyCommand = function callee$0$0(endpoint, method, body) {
  var res;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (endpoint) {
          context$1$0.next = 4;
          break;
        }

        throw new _appiumBaseDriver.errors.BadParametersError('Proxying requires an endpoint');

      case 4:
        if (!(method !== 'POST' && method !== 'GET' && method !== 'DELETE')) {
          context$1$0.next = 6;
          break;
        }

        throw new _appiumBaseDriver.errors.BadParametersError('Proxying only works for GET or POST or DELETE requests');

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.wda.jwproxy.command(endpoint, method, body));

      case 8:
        res = context$1$0.sent;

        if (!(res && res.status && parseInt(res.status, 10) !== 0)) {
          context$1$0.next = 11;
          break;
        }

        throw (0, _appiumBaseDriver.errorFromCode)(res.status, res.value);

      case 11:
        return context$1$0.abrupt('return', res);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, helpers);
exports.helpers = helpers;
exports['default'] = extensions;

// temporarily handle errors that can be returned
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9wcm94eS1oZWxwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztnQ0FBc0Msb0JBQW9COztBQUcxRCxJQUFJLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFbEMsT0FBTyxDQUFDLFlBQVksR0FBRyxvQkFBZ0IsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJO01BT3ZELEdBQUc7Ozs7WUFORixRQUFROzs7OztjQUNMLElBQUkseUJBQU8sa0JBQWtCLENBQUMsK0JBQStCLENBQUM7OztjQUMzRCxNQUFNLEtBQUssTUFBTSxJQUFJLE1BQU0sS0FBSyxLQUFLLElBQUksTUFBTSxLQUFLLFFBQVEsQ0FBQTs7Ozs7Y0FDL0QsSUFBSSx5QkFBTyxrQkFBa0IsQ0FBQyx3REFBd0QsQ0FBQzs7Ozt5Q0FHL0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDOzs7QUFBNUQsV0FBRzs7Y0FHSCxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUE7Ozs7O2NBQy9DLHFDQUFjLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQzs7OzRDQUdyQyxHQUFHOzs7Ozs7O0NBQ1gsQ0FBQzs7QUFFRixlQUFjLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxQixPQUFPLEdBQVAsT0FBTztxQkFDRCxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9wcm94eS1oZWxwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMsIGVycm9yRnJvbUNvZGUgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5cbmxldCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuaGVscGVycy5wcm94eUNvbW1hbmQgPSBhc3luYyBmdW5jdGlvbiAoZW5kcG9pbnQsIG1ldGhvZCwgYm9keSkge1xuICBpZiAoIWVuZHBvaW50KSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5CYWRQYXJhbWV0ZXJzRXJyb3IoJ1Byb3h5aW5nIHJlcXVpcmVzIGFuIGVuZHBvaW50Jyk7XG4gIH0gZWxzZSBpZiAobWV0aG9kICE9PSAnUE9TVCcgJiYgbWV0aG9kICE9PSAnR0VUJyAmJiBtZXRob2QgIT09ICdERUxFVEUnKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5CYWRQYXJhbWV0ZXJzRXJyb3IoJ1Byb3h5aW5nIG9ubHkgd29ya3MgZm9yIEdFVCBvciBQT1NUIG9yIERFTEVURSByZXF1ZXN0cycpO1xuICB9XG5cbiAgbGV0IHJlcyA9IGF3YWl0IHRoaXMud2RhLmp3cHJveHkuY29tbWFuZChlbmRwb2ludCwgbWV0aG9kLCBib2R5KTtcblxuICAvLyB0ZW1wb3JhcmlseSBoYW5kbGUgZXJyb3JzIHRoYXQgY2FuIGJlIHJldHVybmVkXG4gIGlmIChyZXMgJiYgcmVzLnN0YXR1cyAmJiBwYXJzZUludChyZXMuc3RhdHVzLCAxMCkgIT09IDApIHtcbiAgICB0aHJvdyBlcnJvckZyb21Db2RlKHJlcy5zdGF0dXMsIHJlcy52YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
