'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function detectUdid() {
  var cmd, args, udid, _ref, stdout;

  return _regeneratorRuntime.async(function detectUdid$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Auto-detecting real device udid...');
        cmd = undefined, args = [];
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('idevice_id'));

      case 5:
        cmd = context$1$0.sent;

        args.push('-l');
        _logger2['default'].debug('Using idevice_id');
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](2);

        _logger2['default'].debug('Using udidetect');
        cmd = require.resolve('udidetect');

      case 14:
        udid = undefined;
        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(cmd, args, { timeout: 3000 }));

      case 18:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;

        udid = stdout.split('\n')[0];
        context$1$0.next = 26;
        break;

      case 23:
        context$1$0.prev = 23;
        context$1$0.t1 = context$1$0['catch'](15);

        _logger2['default'].errorAndThrow('Error detecting udid: ' + context$1$0.t1.message);

      case 26:
        if (!(!udid || udid.length <= 2)) {
          context$1$0.next = 28;
          break;
        }

        throw new Error('Could not detect udid.');

      case 28:
        _logger2['default'].debug('Detected real device udid: \'' + udid + '\'');
        return context$1$0.abrupt('return', udid);

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 10], [15, 23]]);
}

function getAndCheckXcodeVersion() {
  var version;
  return _regeneratorRuntime.async(function getAndCheckXcodeVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        version = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 4:
        version = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug(context$1$0.t0);
        _logger2['default'].errorAndThrow('Could not determine Xcode version: ' + context$1$0.t0.message);

      case 11:

        // we do not support Xcodes < 7.3,
        if (version.versionFloat < 7.3) {
          _logger2['default'].warn('Xcode version \'' + version.versionString + '\'. Support for Xcode ' + (version.versionString + ' has been deprecated and will be removed ') + 'in a future version. Please upgrade to version 7 or higher');
        }
        return context$1$0.abrupt('return', version);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
}

function getAndCheckIosSdkVersion() {
  var versionNumber;
  return _regeneratorRuntime.async(function getAndCheckIosSdkVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        versionNumber = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getMaxIOSSDK());

      case 4:
        versionNumber = context$1$0.sent;
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].errorAndThrow('Could not determine iOS SDK version: ' + context$1$0.t0.message);

      case 10:
        return context$1$0.abrupt('return', versionNumber);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
}

function killAppUsingAppName(udid, appName) {
  var psArgs;
  return _regeneratorRuntime.async(function killAppUsingAppName$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        psArgs = ['-c', 'ps -ax|grep -i "' + appName + '"|grep -i "' + udid + '"|grep -v grep|awk \'{print "kill -9 " $1}\'|sh'];
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', psArgs));

      case 4:
        context$1$0.next = 9;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug('Error : ' + context$1$0.t0.message);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 6]]);
}

exports.detectUdid = detectUdid;
exports.getAndCheckXcodeVersion = getAndCheckXcodeVersion;
exports.getAndCheckIosSdkVersion = getAndCheckIosSdkVersion;
exports.killAppUsingAppName = killAppUsingAppName;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OzZCQUFtQixnQkFBZ0I7OzRCQUNkLGNBQWM7OzJCQUNqQixjQUFjOzs7O3NCQUNoQixVQUFVOzs7O0FBRzFCLFNBQWUsVUFBVTtNQUVsQixHQUFHLEVBQUUsSUFBSSxFQVNWLElBQUksUUFFRCxNQUFNOzs7OztBQVpiLDRCQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBQzNDLFdBQUcsY0FBRSxJQUFJLEdBQUcsRUFBRTs7O3lDQUVMLGtCQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7OztBQUFsQyxXQUFHOztBQUNILFlBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEIsNEJBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Ozs7Ozs7O0FBRTlCLDRCQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzdCLFdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDOzs7QUFFakMsWUFBSTs7O3lDQUVlLHdCQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLENBQUM7Ozs7QUFBaEQsY0FBTSxRQUFOLE1BQU07O0FBQ1gsWUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7O0FBRTdCLDRCQUFJLGFBQWEsNEJBQTBCLGVBQUksT0FBTyxDQUFHLENBQUM7OztjQUV4RCxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQTs7Ozs7Y0FDckIsSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUM7OztBQUUzQyw0QkFBSSxLQUFLLG1DQUFnQyxJQUFJLFFBQUksQ0FBQzs0Q0FDM0MsSUFBSTs7Ozs7OztDQUNaOztBQUVELFNBQWUsdUJBQXVCO01BQ2hDLE9BQU87Ozs7QUFBUCxlQUFPOzs7eUNBRU8seUJBQU0sVUFBVSxDQUFDLElBQUksQ0FBQzs7O0FBQXRDLGVBQU87Ozs7Ozs7O0FBRVAsNEJBQUksS0FBSyxnQkFBSyxDQUFDO0FBQ2YsNEJBQUksYUFBYSx5Q0FBdUMsZUFBSSxPQUFPLENBQUcsQ0FBQzs7Ozs7QUFJekUsWUFBSSxPQUFPLENBQUMsWUFBWSxHQUFHLEdBQUcsRUFBRTtBQUM5Qiw4QkFBSSxJQUFJLENBQUUscUJBQWtCLE9BQU8sQ0FBQyxhQUFhLCtCQUNwQyxPQUFPLENBQUMsYUFBYSwrQ0FBMkMsK0RBQ1AsQ0FBQyxDQUFDO1NBQ3pFOzRDQUNNLE9BQU87Ozs7Ozs7Q0FDZjs7QUFFRCxTQUFlLHdCQUF3QjtNQUNqQyxhQUFhOzs7O0FBQWIscUJBQWE7Ozt5Q0FFTyx5QkFBTSxZQUFZLEVBQUU7OztBQUExQyxxQkFBYTs7Ozs7Ozs7QUFFYiw0QkFBSSxhQUFhLDJDQUF5QyxlQUFJLE9BQU8sQ0FBRyxDQUFDOzs7NENBRXBFLGFBQWE7Ozs7Ozs7Q0FDckI7O0FBRUQsU0FBZSxtQkFBbUIsQ0FBRSxJQUFJLEVBQUUsT0FBTztNQUMzQyxNQUFNOzs7O0FBQU4sY0FBTSxHQUFHLDRCQUEwQixPQUFPLG1CQUFjLElBQUkscURBQWdEOzs7eUNBRXhHLGdDQUFhLE1BQU0sQ0FBQzs7Ozs7Ozs7OztBQUUxQiw0QkFBSSxLQUFLLGNBQVksZUFBSSxPQUFPLENBQUcsQ0FBQzs7Ozs7OztDQUV2Qzs7UUFFUSxVQUFVLEdBQVYsVUFBVTtRQUFFLHVCQUF1QixHQUF2Qix1QkFBdUI7UUFBRSx3QkFBd0IsR0FBeEIsd0JBQXdCO1FBQUUsbUJBQW1CLEdBQW5CLG1CQUFtQiIsImZpbGUiOiJsaWIvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHhjb2RlIGZyb20gJ2FwcGl1bS14Y29kZSc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5hc3luYyBmdW5jdGlvbiBkZXRlY3RVZGlkICgpIHtcbiAgbG9nLmRlYnVnKCdBdXRvLWRldGVjdGluZyByZWFsIGRldmljZSB1ZGlkLi4uJyk7XG4gIGxldCAgY21kLCBhcmdzID0gW107XG4gIHRyeSB7XG4gICAgY21kID0gYXdhaXQgZnMud2hpY2goJ2lkZXZpY2VfaWQnKTtcbiAgICBhcmdzLnB1c2goJy1sJyk7XG4gICAgbG9nLmRlYnVnKCdVc2luZyBpZGV2aWNlX2lkJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5kZWJ1ZygnVXNpbmcgdWRpZGV0ZWN0Jyk7XG4gICAgY21kID0gcmVxdWlyZS5yZXNvbHZlKCd1ZGlkZXRlY3QnKTtcbiAgfVxuICBsZXQgdWRpZDtcbiAgdHJ5IHtcbiAgICBsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjKGNtZCwgYXJncywge3RpbWVvdXQ6IDMwMDB9KTtcbiAgICB1ZGlkID0gc3Rkb3V0LnNwbGl0KCdcXG4nKVswXTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEVycm9yIGRldGVjdGluZyB1ZGlkOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIGlmICghdWRpZCB8fCB1ZGlkLmxlbmd0aCA8PSAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZGV0ZWN0IHVkaWQuJyk7XG4gIH1cbiAgbG9nLmRlYnVnKGBEZXRlY3RlZCByZWFsIGRldmljZSB1ZGlkOiAnJHt1ZGlkfSdgKTtcbiAgcmV0dXJuIHVkaWQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFuZENoZWNrWGNvZGVWZXJzaW9uICgpIHtcbiAgbGV0IHZlcnNpb247XG4gIHRyeSB7XG4gICAgdmVyc2lvbiA9IGF3YWl0IHhjb2RlLmdldFZlcnNpb24odHJ1ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5kZWJ1ZyhlcnIpO1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgZGV0ZXJtaW5lIFhjb2RlIHZlcnNpb246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cblxuICAvLyB3ZSBkbyBub3Qgc3VwcG9ydCBYY29kZXMgPCA3LjMsXG4gIGlmICh2ZXJzaW9uLnZlcnNpb25GbG9hdCA8IDcuMykge1xuICAgIGxvZy53YXJuKCBgWGNvZGUgdmVyc2lvbiAnJHt2ZXJzaW9uLnZlcnNpb25TdHJpbmd9Jy4gU3VwcG9ydCBmb3IgWGNvZGUgYCArXG4gICAgICAgICAgICAgIGAke3ZlcnNpb24udmVyc2lvblN0cmluZ30gaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGAgK1xuICAgICAgICAgICAgICBgaW4gYSBmdXR1cmUgdmVyc2lvbi4gUGxlYXNlIHVwZ3JhZGUgdG8gdmVyc2lvbiA3IG9yIGhpZ2hlcmApO1xuICB9XG4gIHJldHVybiB2ZXJzaW9uO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbmRDaGVja0lvc1Nka1ZlcnNpb24gKCkge1xuICBsZXQgdmVyc2lvbk51bWJlcjtcbiAgdHJ5IHtcbiAgICB2ZXJzaW9uTnVtYmVyID0gYXdhaXQgeGNvZGUuZ2V0TWF4SU9TU0RLKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgZGV0ZXJtaW5lIGlPUyBTREsgdmVyc2lvbjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuICByZXR1cm4gdmVyc2lvbk51bWJlcjtcbn1cblxuYXN5bmMgZnVuY3Rpb24ga2lsbEFwcFVzaW5nQXBwTmFtZSAodWRpZCwgYXBwTmFtZSkge1xuICBsZXQgcHNBcmdzID0gW2AtY2AsIGBwcyAtYXh8Z3JlcCAtaSBcIiR7YXBwTmFtZX1cInxncmVwIC1pIFwiJHt1ZGlkfVwifGdyZXAgLXYgZ3JlcHxhd2sgJ3twcmludCBcImtpbGwgLTkgXCIgJDF9J3xzaGBdO1xuICB0cnkge1xuICAgIGF3YWl0IGV4ZWMoYGJhc2hgLCBwc0FyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZGVidWcoYEVycm9yIDogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufVxuXG5leHBvcnQgeyBkZXRlY3RVZGlkLCBnZXRBbmRDaGVja1hjb2RlVmVyc2lvbiwgZ2V0QW5kQ2hlY2tJb3NTZGtWZXJzaW9uLCBraWxsQXBwVXNpbmdBcHBOYW1lIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
